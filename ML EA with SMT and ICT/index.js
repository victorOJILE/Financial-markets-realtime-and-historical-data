/*+------------------------------------------------------------------+
//|                                        ForexStrategyAnalyzer.mq5 |
//|                                                 Gemini AI-tutor  |
//|                                         https://gemini.google.com|
//+------------------------------------------------------------------+
#property copyright "Gemini AI-tutor"
#property link "https://gemini.google.com"
#property version "1.00"
#property description "A conceptual forex timeseries analyzer based on sentiment scores with stateful memory and"
#property description "a logistic regression model for signal generation."
#property description "ensemble logic, focused on key price action."
#property description "The logic analyzes candles for sentiment, FVG, "
#property description "and swing points to generate a final buy/sell/hold signal."
*/

const LookBackPeriod = 150; // Number of past candles to analyze
const MaxSpread_pips = 2.0;
const TimeDifference = -3;

const FastMAPeriod = 21; // Period for the fast moving average
const FVGApproachDistance = 20; // in pips
const MaxSwings = 5;
const volatilityThresholdPercentile = 60;

let start = 235;
let lastTime = 0;
let _Point = 0.1;

// A comprehensive struct to store all data for a single candle.
/*
// This will only be populated and stored in memory if the candle is "relevant".
struct CandleData {
 double open;
 double high;
 double low;
 double close;
 
 int bullScore;
 int bearScore;
 
 int fvgType;
 double fvgStart;
 double fvgEnd;
 
 int obType;
 double obStart;
 double obEnd;
 bool obMitigated;

 bool isSwingHigh;
 bool isSwingLow;
 bool tookSwingHigh;
 bool tookSwingLow;
 int swingRecovery;
};
*/
let CandleData = () => ({
 open: 0.0,
 high: 0.0,
 low: 0.0,
 close: 0.0,
 
 bullScore: 0,
 bearScore: 0,
 
 fvgType: -1,
 fvgStart: 0.0,
 fvgEnd: 0.0,
 
 obType: -1,
 obStart: 0.0,
 obEnd: 0.0,
 obMitigated: false,
 
 isSwingHigh: false,
 isSwingLow: false,
 tookSwingHigh: false,
 tookSwingLow: false,
 swingRecovery: 0,
});

// The high-level memory state. This is the brain of the model.
/*
struct GlobalMemory {
 // A score that indicates the trend's momentum and confidence
 double momentumScore;
 
 int activeFVGType;
 double activeFvgStart;
 double activeFvgEnd;
 
 // Flags to track price interaction with key levels
 int approachingFVG;
 int inFVG;
 int fvgJustMitigated;
 int priceLeftFVG;
 
 int approachingOB;
 int inOB;
 
 int breakout;
 
 // New market dynamics and timing features
 int tradingSession;
 int EMAvsPrice;
 int isEngulfing;
 int smtDivergenceDetected;
 int smtDivergenceConfirmed;
 
 // To track the previous candle's score for backtracking logic
 double previousBullScore;
 double previousBearScore;
};
*/

let globalMemory = () => ({
 // A score that indicates the trend's momentum and confidence 
 momentumScore: 0.0,
 
 activeFVGType: -1,
 activeFvgStart: 0.0,
 activeFvgEnd: 0.0,
 
 // Flags to track price interaction with key levels
 approachingFVG: 0,
 inFVG: 0,
 fvgJustMitigated: 0,
 priceLeftFVG: 0,
 
 approachingOB: 0,
 inOB: 0,
 
 breakout: 0,
 smtDivergenceDetected: 0,
 smtDivergenceConfirmed: 0,
 
 // Market dynamics and timing features
 tradingSession: 0,
 EMAvsPrice: 0,
 isEngulfing: 0,
 
 // To track the previous candle's score for backtracking logic
 previousBullScore: 0.0,
 previousBearScore: 0.0
});

let candlesArr;
let xauus = [
 [23, 3769.36, 3769.58, 3761.85, 3763.62],
 [23, 3768.92, 3769.6, 3767.03, 3769.38],
 [23, 3765.45, 3770.09, 3765.04, 3769.02],
 [22, 3765.41, 3765.96, 3764.61, 3765.49],
 [22, 3762.08, 3766.61, 3762.08, 3765.51],
 [22, 3764.01, 3764.74, 3761.65, 3762.07],
 [22, 3766.03, 3767.49, 3764.33, 3764.33],
 [20, 3763.98, 3764.83, 3762.49, 3764.04],
 [20, 3765.11, 3766.51, 3763.54, 3764],
 [20, 3765.12, 3765.5, 3763.37, 3765.15],
 [20, 3764.46, 3767.39, 3763.76, 3765.23],
 [19, 3765.51, 3768.23, 3764.06, 3764.45],
 [19, 3758.71, 3766.35, 3758.71, 3765.48],
 [19, 3757.2, 3759.85, 3751.96, 3758.71],
 [19, 3756.84, 3765.31, 3755.53, 3757.19],
 [18, 3780.25, 3780.64, 3756.19, 3756.67],
 [18, 3778.64, 3780.99, 3777.72, 3780.37],
 [18, 3777.51, 3779.44, 3777.51, 3778.91],
 [18, 3777.46, 3781.44, 3776.92, 3777.51],
 [17, 3778.3, 3780.76, 3775.84, 3777.44],
 [17, 3782.25, 3783.06, 3777.22, 3778.03],
 [17, 3781.26, 3785.75, 3779.84, 3782.3],
 [17, 3779.29, 3781.7, 3779.26, 3781.28],
 [16, 3773.67, 3781.83, 3773.55, 3779.35],
 [16, 3775.3, 3778.1, 3765.19, 3773.58],
 [16, 3774.45, 3779.99, 3773.35, 3775.32],
 [16, 3779.18, 3779.98, 3773.6, 3774.69],
 [15, 3779.16, 3779.64, 3775.21, 3779.4],
 [15, 3780.44, 3782.08, 3778.6, 3779.14],
 [15, 3779.15, 3780.4, 3777.51, 3780.15],
 [15, 3774.01, 3779.55, 3772.81, 3779.12],
 [14, 3773.12, 3775.32, 3771.14, 3774.01],
 [14, 3771.25, 3775.49, 3770.92, 3773.38],
 [14, 3776.86, 3777.89, 3767.72, 3771.4],
 [14, 3783.88, 3784.84, 3773.68, 3778.12],
 [13, 3784.57, 3786.19, 3774.16, 3783.9],
 [13, 3783.74, 3788.53, 3780.56, 3784.87],
 [13, 3786.87, 3787.75, 3781.19, 3783.64],
 [13, 3784.37, 3787.93, 3783.02, 3786.76],
 [12, 3784.4, 3785.37, 3783.73, 3784.32],
 [12, 3781.25, 3784.6, 3779.41, 3784.31],
 [12, 3779.32, 3784.91, 3777.57, 3781.18],
 [12, 3783.64, 3783.64, 3777.58, 3779.48],
 [11, 3783.15, 3784.45, 3780.53, 3783.53],
 [11, 3788.16, 3788.5, 3782.25, 3783.05],
 [11, 3780.29, 3788.88, 3780.03, 3788.17],
 [11, 3782.93, 3784.13, 3779.74, 3780.25],
 [10, 3783.1, 3783.99, 3780.82, 3782.87],
 [10, 3782.56, 3785.41, 3782.56, 3783.06],
 [10, 3786.15, 3787.9, 3781.62, 3782.55],
 [10, 3784.84, 3786.4, 3782.78, 3786.3],
 [9, 3778.41, 3786.19, 3778.41, 3784.87],
 [9, 3786.91, 3787.56, 3778.45, 3778.69],
 [9, 3783.99, 3791.06, 3782.22, 3787.15],
 [9, 3774.43, 3785.18, 3774.07, 3784.09],
 [8, 3770.16, 3775.13, 3769.24, 3774.54],
 [8, 3759.14, 3770.3, 3759.14, 3770.1],
 [8, 3754.94, 3759.58, 3754.84, 3759.26],
 [8, 3753.4, 3755.79, 3753.14, 3754.96],
 [7, 3754.42, 3755.87, 3751.76, 3753.46],
 [7, 3754.9, 3757.34, 3753.22, 3754.51],
 [7, 3753, 3755.68, 3750.85, 3754.69],
 [7, 3753.79, 3753.93, 3749.01, 3752.84],
 [6, 3752.9, 3756.65, 3752.83, 3754.02],
 [6, 3756.45, 3756.82, 3752.3, 3753.03],
 [6, 3754.51, 3757.36, 3753.54, 3756.47],
 [6, 3752.97, 3755.76, 3751.28, 3754.52],
 [5, 3757.17, 3758.76, 3753, 3753],
 [5, 3749.93, 3757.15, 3749.4, 3757.14],
 [5, 3746.27, 3750.21, 3746.23, 3750.03],
 [5, 3744.77, 3747.26, 3743.19, 3746.38],
 [4, 3746.83, 3747.14, 3743.5, 3744.76],
 [4, 3746.13, 3747.41, 3744.52, 3746.86],
 [4, 3745.26, 3746.62, 3743.31, 3745.99],
 [4, 3746.71, 3747.54, 3743.74, 3745.27],
 [3, 3743.92, 3747.28, 3743.85, 3746.7],
 [3, 3742.83, 3744.19, 3741.95, 3744.04],
 [3, 3739.18, 3744.58, 3739.18, 3742.82],
 [3, 3741.93, 3742.34, 3739.09, 3739.37],
 [2, 3742.38, 3743.97, 3736.46, 3741.95],
 [2, 3742.85, 3744.59, 3740.31, 3742.45],
 [2, 3743.75, 3745.23, 3741.5, 3742.81],
 [2, 3754.67, 3755.45, 3741.26, 3743.44],
 [1, 3757.11, 3759.26, 3753.36, 3754.61],
 [1, 3749.79, 3758.65, 3747.84, 3757.12],
 [1, 3754.66, 3758.07, 3747.78, 3750.02],
 [1, 3747.12, 3755.41, 3745.78, 3754.66],
 [0, 3749.39, 3750.65, 3746.18, 3747.26],
 [0, 3748.89, 3749.58, 3747.06, 3749.39],
 [0, 3746.85, 3748.98, 3744.76, 3748.94],
 [0, 3747.92, 3748.92, 3746.49, 3746.8],
 [23, 3747.21, 3749.19, 3746.6, 3747.87],
 [23, 3746.84, 3748.02, 3745.83, 3747.17],
 [23, 3742.48, 3749.12, 3742.15, 3746.81],
 [23, 3739.98, 3742.36, 3739.01, 3742.36],
 [22, 3741.76, 3741.95, 3738.24, 3740.03],
 [22, 3743.29, 3745.38, 3741.07, 3741.72],
 [22, 3744.95, 3746.1, 3743.3, 3743.3],
 [22, 3745.19, 3747.72, 3744.74, 3744.85],
 [21, 3746.7, 3746.7, 3746.7, 3746.7],
 [20, 3747.82, 3748.46, 3745.8, 3746.87],
 [20, 3747.71, 3748.64, 3746.95, 3747.73],
 [20, 3745.73, 3747.84, 3745.37, 3747.7],
 [20, 3747.65, 3748.29, 3745.64, 3745.73],
 [19, 3745.7, 3748.46, 3745.38, 3747.79],
 [19, 3743.83, 3747.35, 3742.52, 3745.67],
 [19, 3747.55, 3748.22, 3743.27, 3743.81],
 [19, 3747.7, 3748.84, 3747.24, 3747.55],
 [18, 3745.45, 3748.05, 3745.45, 3747.58],
 [18, 3746.02, 3746.76, 3744.7, 3745.39],
 [18, 3745.82, 3747.69, 3745.14, 3745.97],
 [18, 3746.63, 3747.17, 3745.48, 3745.83],
 [17, 3745.74, 3747.19, 3744.94, 3746.65],
 [17, 3740.26, 3746.13, 3740.26, 3745.8],
 [17, 3739.95, 3741.76, 3738.55, 3740.16],
 [17, 3737.29, 3741.09, 3737.22, 3739.77],
 [16, 3739.43, 3739.58, 3736.37, 3737.13],
 [16, 3736.69, 3739.43, 3736.69, 3739.41],
 [16, 3735.66, 3738.37, 3735.48, 3736.73],
 [16, 3736.23, 3738.94, 3735.17, 3735.69],
 [15, 3733.08, 3736.38, 3733.06, 3736.27],
 [15, 3731.38, 3734.1, 3730.59, 3733.02],
 [15, 3725.19, 3731.85, 3724.38, 3731.35],
 [15, 3725.92, 3727.72, 3723.64, 3725.3],
 [14, 3719.19, 3726.36, 3719.16, 3725.92],
 [14, 3721.53, 3721.99, 3716.88, 3719.27],
 [14, 3720.21, 3722, 3717.12, 3721.48],
 [14, 3722.4, 3722.98, 3717.01, 3720.28],
 [13, 3717.63, 3722.34, 3713.74, 3722.34],
 [13, 3723.27, 3725.14, 3716.19, 3717.67],
 [13, 3722.52, 3725.5, 3720.78, 3723.33],
 [13, 3721.62, 3724.91, 3719.71, 3722.8],
 [12, 3715.18, 3723.16, 3715.18, 3721.4],
 [12, 3715.24, 3718.54, 3713.43, 3714.92],
 [12, 3720.86, 3722.72, 3712.33, 3715.18],
 [12, 3724.78, 3725.53, 3720.75, 3720.86],
 [11, 3721.93, 3724.75, 3721.15, 3724.59],
 [11, 3726.54, 3727.23, 3721.7, 3721.91],
 [11, 3727.33, 3728.37, 3725.62, 3726.54],
 [11, 3727.49, 3727.97, 3725.8, 3727.36],
 [10, 3726.14, 3728.41, 3725.95, 3727.43],
 [10, 3725.17, 3726.79, 3723.22, 3726.12],
 [10, 3723.03, 3727.25, 3723, 3725.17],
 [10, 3723.26, 3724.17, 3721.07, 3723.05],
 [9, 3721.12, 3725.03, 3720.86, 3723.25],
 [9, 3725.26, 3725.62, 3720.64, 3721.09],
 [9, 3720.46, 3726.45, 3720.29, 3725.24],
 [9, 3720.38, 3721.73, 3719.19, 3720.5],
 [8, 3722.09, 3722.45, 3719.73, 3720.41],
 [8, 3717.78, 3722.33, 3717.73, 3722.14],
 [8, 3717.23, 3720.01, 3716.2, 3717.76],
 [8, 3713.2, 3719.53, 3712.35, 3717.23],
 [7, 3714.23, 3715.24, 3712.8, 3713.25],
 [7, 3713.63, 3716.38, 3712.51, 3714.21],
 [7, 3711.55, 3713.8, 3708.67, 3713.67],
 [7, 3714.37, 3714.73, 3709.71, 3711.6],
 [6, 3716.9, 3719.7, 3713.15, 3714.32],
 [6, 3706.31, 3717.19, 3704.87, 3717.19],
 [6, 3700.64, 3706.45, 3699.98, 3706.23],
 [6, 3696.98, 3700.77, 3695.65, 3700.62],
 [5, 3698.31, 3700.22, 3696.32, 3697.1],
 [5, 3696.2, 3699.46, 3696.02, 3698.3],
 [5, 3693.93, 3697.84, 3693.93, 3696.24],
 [5, 3692.19, 3694.27, 3692.01, 3693.94],
 [4, 3691.4, 3692.68, 3691.05, 3692.17],
 [4, 3691.41, 3692.37, 3690.03, 3691.31],
 [4, 3692.36, 3692.53, 3690.59, 3691.35],
 [4, 3695.41, 3695.94, 3691.72, 3692.36],
 [3, 3695.07, 3697.43, 3694.74, 3695.39],
 [3, 3691.51, 3695.19, 3691.05, 3695.11],
 [3, 3690.09, 3692.34, 3688.91, 3691.59],
 [3, 3686.52, 3690.46, 3686.02, 3690.13],
 [2, 3686.91, 3688.96, 3685.52, 3686.39],
 [2, 3691.55, 3693.42, 3686.28, 3686.77],
 [2, 3688.49, 3691.52, 3687.9, 3691.51],
 [2, 3689.38, 3691.33, 3687.34, 3688.52],
 [1, 3688.39, 3690.48, 3686.69, 3689.46],
 [1, 3689.83, 3693.32, 3688.03, 3688.46],
 [1, 3694.69, 3696.68, 3689.66, 3690.06],
 [1, 3690.93, 3695.26, 3686.82, 3694.7],
 [0, 3689.53, 3691.06, 3687.5, 3690.86],
 [0, 3689.59, 3690.72, 3688.88, 3689.57],
 [0, 3690.56, 3690.79, 3687.76, 3689.58],
 [0, 3686.21, 3690.74, 3685.8, 3690.57],
 [23, 3686.45, 3687.9, 3685.74, 3686.21],
 [23, 3689.47, 3689.83, 3686.39, 3686.48],
 [23, 3687.06, 3690.5, 3686.56, 3689.44],
 [23, 3688.42, 3689.25, 3686.43, 3687.01],
 [22, 3690.69, 3691.07, 3687.53, 3688.36],
 [22, 3691.22, 3691.24, 3689.07, 3690.63],
 [22, 3688.07, 3692.11, 3685.95, 3691.26],
 [22, 3684.78, 3687.95, 3683.66, 3687.9],
 [20, 3684.64, 3685.1, 3684, 3684.55],
 [20, 3683.12, 3685.02, 3682.81, 3684.65],
 [20, 3681.67, 3683.42, 3680.72, 3683.18],
 [20, 3684.38, 3684.38, 3681.43, 3681.59],
 [19, 3683.03, 3685.23, 3682.74, 3684.43],
 [19, 3683.69, 3683.69, 3681.46, 3683.01],
 [19, 3683.54, 3684.34, 3683.02, 3683.73],
 [19, 3683.73, 3684.39, 3682.41, 3683.45],
 [18, 3682.27, 3684.14, 3681.19, 3683.72],
 [18, 3682.1, 3682.53, 3680.61, 3682.23],
 [18, 3679.63, 3682.74, 3679.63, 3682.08],
 [18, 3678.64, 3680.19, 3678.11, 3679.69],
 [17, 3673.16, 3679.46, 3673.16, 3678.64],
 [17, 3671.7, 3673.32, 3671.51, 3673.04],
 [17, 3670.31, 3672.24, 3670.22, 3671.67],
 [17, 3668.21, 3671.1, 3668.1, 3670.33],
 [16, 3670.45, 3670.81, 3667.53, 3668.16],
 [16, 3668.21, 3670.46, 3667.6, 3670.43],
 [16, 3668.78, 3669.97, 3666.55, 3668.21],
 [16, 3670.8, 3673.3, 3668.06, 3668.78],
 [15, 3670.28, 3671.5, 3668.57, 3670.9],
 [15, 3671.39, 3671.39, 3667.83, 3670.37],
 [15, 3672.25, 3675.81, 3670.9, 3671.41],
 [15, 3666.99, 3672.37, 3665.2, 3672.37],
 [14, 3664.57, 3669.33, 3663.11, 3666.67],
 [14, 3664.05, 3665.83, 3662.42, 3664.58],
 [14, 3660.47, 3664.41, 3656.34, 3663.96],
 [14, 3663.26, 3664.19, 3659.19, 3660.42],
 [13, 3656.86, 3664.42, 3654.45, 3663.36],
 [13, 3656.09, 3658.72, 3654, 3656.72],
 [13, 3653.56, 3655.68, 3652.09, 3655.68],
 [13, 3649.21, 3653.57, 3643.5, 3653.56],
 [12, 3647.41, 3649.72, 3644.57, 3649.22],
 [12, 3647.62, 3649.49, 3646.58, 3647.41],
 [12, 3650.75, 3651.78, 3646.77, 3647.75],
 [12, 3648.5, 3651.13, 3646.54, 3650.76],
 [11, 3647.54, 3649.35, 3645.67, 3648.45],
 [11, 3650.81, 3651.71, 3647.22, 3647.6],
 [11, 3652.76, 3653.58, 3650.61, 3650.82],
 [11, 3655.97, 3655.97, 3652, 3652.75],
 [10, 3657.06, 3657.65, 3654.88, 3655.81],
 [10, 3656.91, 3657.92, 3655.13, 3657.06],
 [10, 3658.6, 3659.12, 3656.79, 3656.9],
 [10, 3658.59, 3658.85, 3657.05, 3658.6],
 [9, 3657.62, 3658.8, 3655.59, 3658.59],
 [9, 3656.58, 3657.96, 3656.09, 3657.62],
 [9, 3656.4, 3658.49, 3656.4, 3656.52],
 [9, 3655.61, 3657.57, 3655.13, 3656.35],
 [8, 3654.24, 3656.64, 3654.24, 3655.62],
 [8, 3652.66, 3655.74, 3652.49, 3654.23],
 [8, 3651.76, 3653.82, 3649.54, 3652.65],
 [8, 3653.86, 3655.04, 3651.42, 3651.74],
 [7, 3652.58, 3657.44, 3652.43, 3653.95],
 [7, 3652.86, 3654.1, 3650.82, 3652.47],
 [7, 3649.38, 3653.9, 3649.23, 3652.88],
 [7, 3647.09, 3650.65, 3644.39, 3649.55],
 [6, 3648, 3648.66, 3644.84, 3647.09],
 [6, 3650.44, 3651.13, 3643.41, 3647.84],
 [6, 3651.87, 3652.21, 3646.52, 3650.46],
 [6, 3652.43, 3654.11, 3650.83, 3651.98],
 [5, 3655.94, 3656.95, 3651.62, 3652.36],
 [5, 3658.61, 3658.8, 3652.92, 3656.11],
 [5, 3657.71, 3659.84, 3656.39, 3658.62],
 [5, 3658.87, 3661.2, 3657.37, 3657.72],
 [4, 3658.69, 3659.77, 3657.48, 3658.87],
 [4, 3659.3, 3659.54, 3656.99, 3658.75],
 [4, 3659.08, 3659.91, 3658.06, 3659.19],
 [4, 3653.59, 3659.62, 3653.59, 3659.09],
 [3, 3655.34, 3656.18, 3652.8, 3653.61],
 [3, 3654.04, 3655.42, 3653.53, 3655],
 [3, 3647.11, 3655.1, 3646.77, 3654.16],
 [3, 3647.33, 3647.86, 3645.4, 3647.08],
 [2, 3646.34, 3650.09, 3644.63, 3647.43],
 [2, 3645.62, 3647.59, 3643.94, 3646.34],
 [2, 3646.72, 3647.04, 3643.61, 3645.61],
 [2, 3639.89, 3647.18, 3638.89, 3646.91],
 [1, 3646.28, 3646.58, 3632.35, 3639.94],
 [1, 3647.54, 3648.45, 3645.39, 3646.24],
 [1, 3648.3, 3650.34, 3646.55, 3647.49],
 [1, 3640.01, 3650.81, 3639.65, 3648.38],
 [0, 3638.59, 3641.29, 3637.84, 3640.09],
 [0, 3638.13, 3638.97, 3636.23, 3638.55],
 [0, 3639.35, 3639.94, 3636.73, 3638],
 [0, 3640.25, 3642.79, 3638.55, 3639.44],
 [23, 3638.17, 3640.39, 3638.06, 3640.24],
 [23, 3639.14, 3639.87, 3637.82, 3638.17],
 [23, 3640.73, 3640.87, 3638.83, 3639.18],
 [23, 3640.24, 3641.91, 3639.96, 3640.72],
 [22, 3642.14, 3642.28, 3639.27, 3640.27],
 [22, 3641.73, 3642.78, 3641.57, 3642.15],
 [22, 3642.76, 3643.34, 3641.45, 3641.69],
 [22, 3643.29, 3644.08, 3641.98, 3642.78],
 [21, 3643.81, 3643.81, 3643.81, 3643.81],
 [20, 3644.48, 3644.84, 3643.88, 3644.39],
 [20, 3646, 3646.15, 3643.89, 3644.49],
 [20, 3645.81, 3646.34, 3645.28, 3645.97],
 [20, 3646.68, 3647.14, 3645.11, 3645.79],
 [19, 3643.85, 3647.11, 3643.35, 3646.74],
 [19, 3642.57, 3644.03, 3642.55, 3643.79],
 [19, 3641.88, 3644.04, 3641.59, 3642.71],
 [19, 3641.38, 3642.59, 3640.62, 3641.95],
 [18, 3641.89, 3643.1, 3641.37, 3641.57],
 [18, 3642.58, 3643.07, 3641.59, 3641.88],
 [18, 3641.71, 3642.82, 3641.11, 3642.66],
 [18, 3643.61, 3643.61, 3640.68, 3641.72],
 [17, 3643.91, 3644.42, 3643.28, 3643.59],
 [17, 3644.82, 3645.5, 3643.55, 3643.92],
 [17, 3644.16, 3645.78, 3643.59, 3644.68],
 [17, 3646.22, 3646.74, 3643.77, 3644.15],
 [16, 3643.89, 3647.2, 3643.52, 3646.34],
 [16, 3644.26, 3644.95, 3643.36, 3643.94],
 [16, 3643.35, 3645.87, 3643.01, 3644.36],
 [16, 3641.32, 3644.02, 3640.85, 3643.35],
 [15, 3640.06, 3641.76, 3639.07, 3641.24],
 [15, 3639.28, 3641.24, 3638.71, 3640.18],
 [15, 3639.25, 3642.24, 3638.41, 3639.36],
 [15, 3638.38, 3641.8, 3636.79, 3639.14],
 [14, 3642.01, 3646.53, 3640.34, 3641.39],
 [14, 3635.55, 3643.72, 3635.26, 3643.09],
 [14, 3640.87, 3640.99, 3634.64, 3634.78],
 [14, 3642.34, 3646.3, 3638.42, 3640.56],
 [13, 3629.93, 3642.04, 3627.74, 3634.81],
 [13, 3654.03, 3654.94, 3633.62, 3634.2],
 [13, 3658.77, 3661.19, 3651.87, 3653.89],
 [13, 3663.22, 3664.19, 3655.7, 3658.5],
 [12, 3668.94, 3670, 3662.85, 3663.32],
 [12, 3671.35, 3671.35, 3664.64, 3668.86],
 [12, 3667.31, 3672.29, 3666.22, 3671.37],
 [12, 3667.25, 3668.55, 3666.01, 3667.3],
 [11, 3667.32, 3668.56, 3664.96, 3667.12],
 [11, 3666.1, 3669.42, 3664.43, 3667.3],
 [11, 3667.77, 3670.91, 3665.92, 3666.08],
 [11, 3667.09, 3669.01, 3665.79, 3667.73],
 [10, 3665.87, 3669.45, 3665.65, 3667.1],
 [10, 3669.17, 3670.33, 3665.73, 3665.86],
 [10, 3667.41, 3669.57, 3665.61, 3669.18],
 [10, 3671.69, 3672.51, 3667.46, 3667.67],
 [9, 3671.76, 3672.2, 3669.82, 3671.69],
 [9, 3671.28, 3672.96, 3669.93, 3671.73],
 [9, 3667.37, 3672.28, 3665.93, 3671.12],
 [9, 3665.54, 3669.19, 3664.53, 3667.54],
 [8, 3662.42, 3665.77, 3661.37, 3665.56],
 [8, 3656.56, 3662.56, 3655.33, 3662.38],
 [8, 3655.15, 3656.83, 3653.84, 3656.59],
 [8, 3658.93, 3659.47, 3653.98, 3655.11],
 [7, 3658.64, 3659.75, 3656.96, 3658.96],
 [7, 3649.45, 3658.89, 3648.2, 3658.53],
 [7, 3644.46, 3650.15, 3643.58, 3649.5],
 [7, 3637.4, 3645.05, 3635.77, 3644.56],
 [6, 3637.38, 3639.6, 3636.58, 3637.43],
 [6, 3638.82, 3640.2, 3635.71, 3637.6],
 [6, 3637.25, 3639.6, 3634.35, 3638.57],
 [6, 3651.59, 3651.86, 3633.92, 3637.16],
 [5, 3654.24, 3654.89, 3649.55, 3651.56],
 [5, 3658.07, 3659.03, 3651.65, 3654.02],
 [5, 3654.67, 3658.47, 3654.37, 3658],
 [5, 3653.72, 3655.23, 3651.95, 3654.65],
 [4, 3656.34, 3656.99, 3653.56, 3653.67],
 [4, 3658.12, 3658.45, 3655.31, 3656.39],
 [4, 3658.48, 3659.34, 3657.79, 3658.01],
 [4, 3658.64, 3658.87, 3656.83, 3658.5],
 [3, 3660.7, 3661.19, 3657.8, 3658.55],
 [3, 3662.77, 3662.81, 3660.42, 3660.69],
 [3, 3662.7, 3663.06, 3660.99, 3662.71],
 [3, 3664.83, 3666.08, 3661.32, 3662.71],
 [2, 3662.41, 3665.67, 3662.08, 3664.81],
 [2, 3661.89, 3664.67, 3659.8, 3662.24],
 [2, 3662.71, 3663.4, 3661.1, 3661.95],
 [2, 3657.21, 3662.79, 3655.45, 3662.65],
 [1, 3654.72, 3657.29, 3652.48, 3657.07],
 [1, 3654.75, 3658.17, 3652.35, 3654.73],
 [1, 3661.22, 3661.22, 3653.05, 3654.9],
 [1, 3665.28, 3668.8, 3655.16, 3661.09],
 [0, 3659.93, 3665.7, 3659.68, 3665.19],
 [0, 3662.27, 3663.51, 3658.1, 3659.97],
 [0, 3663.89, 3665.72, 3661.68, 3662.32],
 [0, 3669.18, 3670.03, 3661.35, 3663.63],
 [23, 3669.65, 3670.79, 3668.78, 3669.06],
 [23, 3671.04, 3671.21, 3667.77, 3669.57],
 [23, 3667.56, 3671.9, 3667.16, 3671.2],
 [23, 3662.95, 3667.52, 3662.14, 3667.47],
 [22, 3664.08, 3664.15, 3662.47, 3663],
 [22, 3664.22, 3664.58, 3661.04, 3664.12],
 [22, 3663.24, 3665.19, 3661.58, 3664.15],
 [22, 3660.82, 3665.13, 3655.59, 3663.57],
 [21, 3659.76, 3659.76, 3659.76, 3659.76],
 [20, 3657.67, 3659.39, 3657.67, 3658.7],
 [20, 3658.69, 3660.14, 3657.23, 3657.61],
 [20, 3658.8, 3660.15, 3656.22, 3659.04],
 [20, 3661.65, 3661.65, 3658.07, 3658.8],
 [19, 3661.8, 3662.66, 3655.44, 3661.46],
 [19, 3663.75, 3665.29, 3657.62, 3661.56],
 [19, 3650.97, 3666.77, 3648.33, 3663.74],
 [19, 3650.49, 3664.09, 3646.18, 3650.13],
 [18, 3663.27, 3663.75, 3645.99, 3650.29],
 [18, 3682.54, 3684.7, 3679.11, 3682.39],
 [18, 3687.95, 3692.54, 3680.22, 3681.25],
 [18, 3686.46, 3707.42, 3652.05, 3687.93],
 [17, 3684.56, 3687.83, 3684.56, 3686.56],
 [17, 3682.74, 3685.27, 3682.63, 3684.53],
 [17, 3683.29, 3683.6, 3678.78, 3682.68],
 [17, 3684.83, 3684.93, 3682.17, 3683.28],
 [16, 3686.1, 3687.21, 3684.08, 3684.68],
 [16, 3687.95, 3688.18, 3686.04, 3686.1],
 [16, 3685.87, 3688.48, 3685.63, 3687.86],
 [16, 3684.27, 3687.07, 3684.27, 3685.87],
 [15, 3684.96, 3685.25, 3682.93, 3684.26],
 [15, 3685.38, 3687.23, 3684.6, 3684.91],
 [15, 3685.32, 3686.49, 3684.29, 3685.36],
 [15, 3684.37, 3687.19, 3683.48, 3685.43],
 [14, 3685.46, 3686.16, 3682.42, 3684.27],
 [14, 3683.08, 3685.5, 3682.78, 3685.32],
 [14, 3684.15, 3685.14, 3681.77, 3683.1],
 [14, 3678.65, 3684.38, 3676.99, 3684.14],
 [13, 3679.21, 3679.95, 3676.4, 3678.76],
 [13, 3676.58, 3682.54, 3676.36, 3679.19],
 [13, 3678.5, 3679.31, 3674.12, 3676.75],
 [13, 3678.65, 3679.32, 3672.71, 3678.37],
 [12, 3674.69, 3679.21, 3674.33, 3678.62],
 [12, 3670.36, 3675.24, 3669.89, 3674.74],
 [12, 3669.42, 3671.97, 3669.29, 3670.54],
 [12, 3666.05, 3671.65, 3665.71, 3669.43],
 [11, 3667.9, 3669.79, 3664.4, 3666],
 [11, 3668.11, 3668.62, 3665.74, 3667.81],
 [11, 3663.03, 3668.15, 3662.42, 3668],
 [11, 3661.36, 3665.01, 3659.85, 3663.1],
 [10, 3666.46, 3667.19, 3660.38, 3661.4],
 [10, 3666.9, 3666.9, 3664.47, 3666.36],
 [10, 3665.29, 3668.01, 3665.12, 3666.9],
 [10, 3667.83, 3669.78, 3660.75, 3665.06],
 [9, 3668.14, 3669.56, 3667.41, 3667.57],
 [9, 3668.74, 3670.08, 3667.05, 3668.15],
 [9, 3668.25, 3670.96, 3668.1, 3668.73],
 [9, 3664.86, 3668.84, 3663.85, 3668.39],
 [8, 3663.81, 3666.78, 3663.52, 3664.88],
 [8, 3666.85, 3667.96, 3662.61, 3663.78],
 [8, 3665.33, 3667.08, 3663.17, 3666.87],
 [8, 3667.12, 3667.23, 3664.52, 3665.3],
 [7, 3670.61, 3671.07, 3666.8, 3667.16],
 [7, 3667.22, 3671.32, 3666.42, 3670.44],
 [7, 3671.23, 3671.57, 3666.54, 3667.43],
 [7, 3675.09, 3677.15, 3670.39, 3671.27],
 [6, 3671.56, 3676.62, 3670.98, 3675.2],
 [6, 3675.75, 3676.77, 3670.26, 3671.49],
 [6, 3675.99, 3679.15, 3675.32, 3675.86],
 [6, 3679.31, 3680.09, 3674.77, 3675.92],
 [5, 3678.85, 3679.68, 3677.36, 3679.13],
 [5, 3680.68, 3681.74, 3675.97, 3678.9],
 [5, 3683.4, 3684.19, 3679.06, 3680.66],
 [5, 3680.83, 3685.91, 3680.62, 3683.48],
 [4, 3681.61, 3681.76, 3680.42, 3680.8],
 [4, 3681.08, 3682.06, 3680.63, 3681.5],
 [4, 3682.13, 3682.35, 3680.93, 3681.09],
 [4, 3681.69, 3682.5, 3681.19, 3682.01],
 [3, 3682.26, 3682.61, 3680.6, 3681.79],
 [3, 3681.12, 3682.5, 3680.97, 3682.29],
 [3, 3681.83, 3683.41, 3680.83, 3681.27],
 [3, 3682.2, 3682.95, 3679.9, 3681.79],
 [2, 3680.97, 3683.85, 3680.46, 3682.22],
 [2, 3677.37, 3681.22, 3674.45, 3680.99],
 [2, 3681.26, 3681.79, 3677.45, 3677.45],
 [2, 3679.54, 3681.54, 3676.3, 3681.42],
 [1, 3677.8, 3681.02, 3675.89, 3679.67],
 [1, 3685.66, 3685.72, 3676.86, 3678.03],
 [1, 3690.99, 3691.13, 3686.07, 3686.07],
 [1, 3691.13, 3692.05, 3690, 3691],
 [0, 3692.87, 3692.87, 3691.06, 3691.23],
 [0, 3693.78, 3694.15, 3692.83, 3692.94],
 [0, 3694.97, 3695.15, 3692.47, 3693.85],
 [0, 3694.17, 3695.19, 3692.37, 3694.97],
 [23, 3693.41, 3695.12, 3692.69, 3694.19],
 [23, 3694.45, 3694.78, 3693.39, 3693.41],
 [23, 3694.21, 3694.99, 3693.61, 3694.55],
 [23, 3692.01, 3694.87, 3691.62, 3694.25],
 [22, 3692.69, 3692.82, 3691.07, 3692],
 [22, 3690.98, 3692.77, 3690.98, 3692.68],
 [22, 3691.34, 3691.72, 3690.72, 3691.01],
 [22, 3689.58, 3691.51, 3689.58, 3691.44],
 [21, 3689.57, 3689.57, 3689.57, 3689.57],
 [20, 3692.78, 3692.78, 3689.53, 3689.89],
 [20, 3693.57, 3693.7, 3692.48, 3692.8],
 [20, 3692.71, 3693.65, 3692.4, 3693.57],
 [20, 3689.59, 3692.7, 3689.59, 3692.66],
 [19, 3689.33, 3690.81, 3689.22, 3689.55],
 [19, 3688.93, 3689.56, 3687.8, 3689.34],
 [19, 3691.03, 3691.15, 3688.85, 3688.91],
 [19, 3690.6, 3691, 3688.97, 3691],
 [18, 3688.91, 3690.98, 3688.61, 3690.6],
 [18, 3688.94, 3689.52, 3688.43, 3688.92],
 [18, 3688.5, 3689.27, 3687.51, 3689.11],
 [18, 3687.81, 3688.74, 3686.56, 3688.44],
 [17, 3687.03, 3689.1, 3686.99, 3687.75],
 [17, 3688.68, 3689.25, 3686.31, 3686.93],
 [17, 3688.21, 3689.19, 3687.2, 3688.28],
 [17, 3689.7, 3690.91, 3686.87, 3688.14],
 [16, 3686.69, 3691.15, 3686.69, 3689.74],
 [16, 3689.09, 3691.12, 3686.27, 3686.66],
 [16, 3687.21, 3689.83, 3686.69, 3689.03],
 [16, 3686.24, 3687.68, 3684.67, 3687.16],
 [15, 3680.28, 3687.02, 3680.18, 3686.25],
 [15, 3682.01, 3682.58, 3678.76, 3680.29],
 [15, 3684.02, 3688.96, 3681.71, 3681.86],
 [15, 3686.47, 3687.9, 3680.16, 3684.27],
 [14, 3689.44, 3691.06, 3685.87, 3686.26],
 [14, 3692.89, 3695.89, 3688.96, 3689.58],
 [14, 3699.56, 3702.99, 3691.81, 3692.83],
 [14, 3695.65, 3699.49, 3693.73, 3699.45],
 [13, 3693.17, 3698.38, 3693.17, 3695.58],
 [13, 3694.38, 3698.43, 3692.11, 3693.17],
 [13, 3687.89, 3694.56, 3684.95, 3694.34],
 [13, 3689.33, 3689.33, 3685.32, 3687.93],
 [12, 3689.48, 3690.58, 3687.82, 3689.3],
 [12, 3691.3, 3693.08, 3686.4, 3689.39],
 [12, 3694.34, 3695.93, 3691.27, 3691.67],
 [12, 3697.2, 3697.47, 3693.8, 3694.33],
 [11, 3696.46, 3699.32, 3695.67, 3697.04],
 [11, 3692.8, 3696.51, 3692.15, 3696.51],
 [11, 3692.83, 3693.06, 3690.58, 3692.78],
 [11, 3693.27, 3694.61, 3691.5, 3692.81],
 [10, 3694.3, 3695.81, 3692.84, 3693.25],
 [10, 3697.51, 3697.68, 3693.78, 3694.33],
 [10, 3696.51, 3697.88, 3696.07, 3697.49],
 [10, 3698.22, 3698.75, 3695.9, 3696.52],
 [9, 3696.52, 3698.91, 3696.07, 3698.54],
 [9, 3695.15, 3697.21, 3694.61, 3696.41],
 [9, 3694.99, 3697.94, 3694.26, 3695.14],
 [9, 3694.38, 3695.7, 3693.01, 3694.99],
 [8, 3695.27, 3696.12, 3693.71, 3694.45],
 [8, 3694.74, 3695.32, 3691.87, 3695.24],
 [8, 3695.86, 3696.89, 3693.71, 3694.77],
 [8, 3686.58, 3696.12, 3686.32, 3695.88],
 [7, 3688.24, 3689.48, 3686.22, 3686.59],
 [7, 3691.85, 3692.61, 3687.13, 3688.23],
 [7, 3692.6, 3693.46, 3690.43, 3691.84],
 [7, 3693.23, 3694.11, 3689.88, 3692.62],
 [6, 3689.84, 3694.22, 3688.13, 3693.34],
 [6, 3685.31, 3689.99, 3684.28, 3689.99],
 [6, 3682.92, 3687.08, 3682.65, 3685.38],
 [6, 3682.68, 3684.56, 3681.74, 3682.9],
 [5, 3681.55, 3683.14, 3680.12, 3682.65],
 [5, 3684.18, 3684.42, 3681.46, 3681.68],
 [5, 3684.05, 3684.47, 3683.34, 3684.16],
 [5, 3684.24, 3684.53, 3682.83, 3684],
 [4, 3682.66, 3685.34, 3682.28, 3684.25],
 [4, 3682.08, 3682.79, 3680.1, 3682.65],
 [4, 3682.47, 3683.45, 3681.57, 3681.95],
 [4, 3681.01, 3682.54, 3680.61, 3682.5],
 [3, 3681.36, 3682.08, 3680.48, 3680.96],
 [3, 3681.75, 3683.16, 3680.62, 3681.35],
 [3, 3680.56, 3681.91, 3680.31, 3681.81],
 [3, 3677.68, 3680.59, 3677.01, 3680.43],
 [2, 3678.01, 3680.45, 3674.46, 3677.74],
 [2, 3680.94, 3681.1, 3676.36, 3677.89],
 [2, 3681.74, 3682.31, 3680.16, 3680.93],
 [2, 3679.35, 3682.72, 3678.66, 3681.69],
 [1, 3677.88, 3679.52, 3677.43, 3679.42],
 [1, 3678.48, 3681.7, 3677.66, 3677.77],
 [1, 3680.18, 3680.57, 3677.04, 3678.66],
 [1, 3686.31, 3689.24, 3679.07, 3680.04],
 [0, 3684.31, 3686.98, 3682.27, 3686.33],
 [0, 3683.67, 3685.29, 3682.31, 3684.36],
 [0, 3679.47, 3683.76, 3679.03, 3683.66],
 [0, 3676.89, 3679.77, 3676.22, 3679.44],
 [23, 3678.45, 3678.45, 3676.25, 3677.04],
 [23, 3678.9, 3679.01, 3678.12, 3678.39],
 [23, 3679.63, 3680.5, 3677.95, 3678.89],
 [23, 3678.88, 3680.34, 3678.71, 3679.64],
 [22, 3678.54, 3679.05, 3677.86, 3678.87],
 [22, 3678.79, 3679.98, 3678.07, 3678.49],
 [22, 3677.95, 3678.92, 3676.45, 3678.89],
 [22, 3680.72, 3681.32, 3676.42, 3678.04],
 [20, 3681.1, 3681.22, 3678.75, 3678.84],
 [20, 3680.49, 3681.4, 3679.87, 3681.15],
 [20, 3681.12, 3681.68, 3680.5, 3680.54],
 [20, 3680.94, 3681.95, 3679.27, 3681.06],
 [19, 3682.04, 3682.8, 3680.65, 3680.93],
 [19, 3679.38, 3681.93, 3679.28, 3681.83],
 [19, 3680.04, 3680.86, 3679.2, 3679.27],
 [19, 3676.99, 3680.3, 3676.75, 3680.04],
 [18, 3678.34, 3678.73, 3675.85, 3676.87],
 [18, 3680.14, 3680.74, 3675.88, 3678.46],
 [18, 3678.55, 3680.46, 3677.48, 3680.1],
 [18, 3681.79, 3681.99, 3678.42, 3678.42],
 [17, 3680.64, 3682.17, 3679.91, 3681.73],
 [17, 3680.06, 3682.57, 3679.8, 3680.61],
 [17, 3679.72, 3681.23, 3678.55, 3680.02],
 [17, 3679.16, 3681.71, 3679.11, 3679.71],
 [16, 3678.89, 3680.87, 3674.71, 3679.17],
 [16, 3684.23, 3685.44, 3676.78, 3678.82],
 [16, 3681, 3684.54, 3679.64, 3684.16],
 [16, 3680.59, 3682.35, 3677.45, 3680.77],
 [15, 3668.5, 3681.92, 3668.5, 3680.62],
 [15, 3667.4, 3669.06, 3665.85, 3668.55],
 [15, 3664.79, 3667.77, 3663.88, 3667.42],
 [15, 3663.55, 3665.83, 3663.09, 3664.7],
 [14, 3661.83, 3663.77, 3660.82, 3663.45],
 [14, 3657.86, 3662.01, 3656.97, 3661.94],
 [14, 3660.31, 3660.31, 3655.95, 3657.68],
 [14, 3657.2, 3660.96, 3653.99, 3659.76],
 [13, 3662.94, 3664.07, 3656.42, 3656.96],
 [13, 3653.81, 3664.13, 3652.78, 3662.88],
 [13, 3649.52, 3653.73, 3648.25, 3653.62],
 [13, 3650.07, 3650.92, 3646.93, 3649.51],
 [12, 3644.94, 3650.86, 3643.79, 3650.1],
 [12, 3638.51, 3644.91, 3638.13, 3644.64],
 [12, 3640.44, 3640.67, 3637.11, 3638.38],
 [12, 3642.56, 3643.55, 3640.04, 3640.56],
 [11, 3646.32, 3646.53, 3642.13, 3642.55],
 [11, 3644.38, 3646.52, 3643.76, 3646.38],
 [11, 3643.04, 3645.82, 3642.78, 3644.45],
 [11, 3640.08, 3643.1, 3639, 3642.95],
 [10, 3642.7, 3643.05, 3639.2, 3639.91],
 [10, 3645.89, 3646.4, 3642.24, 3642.71],
 [10, 3644.37, 3646.28, 3644.06, 3645.88],
 [10, 3641.24, 3644.67, 3641.23, 3644.37],
 [9, 3637.77, 3641.63, 3636, 3641.18],
 [9, 3640.31, 3640.36, 3635.77, 3637.83],
 [9, 3644.6, 3645.16, 3639.64, 3640.35],
 [9, 3645.53, 3645.96, 3642.94, 3644.59],
 [8, 3641.94, 3645.66, 3640.85, 3645.51],
 [8, 3641.67, 3643.03, 3641.33, 3641.98],
 [8, 3641.7, 3643.18, 3641.03, 3641.68],
 [8, 3643.7, 3645.16, 3641.46, 3641.46],
 [7, 3641.15, 3644.9, 3639.69, 3643.82],
 [7, 3636.31, 3642.02, 3636.27, 3641.16],
 [7, 3636.02, 3636.51, 3633.65, 3636.35],
 [7, 3636.67, 3637.87, 3634.09, 3636.05],
 [6, 3639.58, 3640.85, 3636.83, 3636.88],
 [6, 3642.01, 3643.71, 3638.66, 3639.68],
 [6, 3642.52, 3643.72, 3640.48, 3642.07],
 [6, 3643.56, 3643.91, 3641.83, 3642.55],
 [5, 3643.99, 3644.82, 3643.31, 3643.7],
 [5, 3645.34, 3646.04, 3643.32, 3643.99],
 [5, 3642.9, 3645.81, 3642.32, 3645.32],
 [5, 3645.57, 3645.84, 3642.5, 3642.91],
 [4, 3644.36, 3645.58, 3643.6, 3645.58],
 [4, 3645.15, 3645.34, 3644.18, 3644.45],
 [4, 3645.98, 3646.47, 3644.37, 3645.19],
 [4, 3646.04, 3646.91, 3645.29, 3645.99],
 [3, 3644.79, 3646.5, 3644.68, 3646.07],
 [3, 3643.82, 3645.79, 3643.09, 3644.8],
 [3, 3643.15, 3644.24, 3641.1, 3643.83],
 [3, 3641.09, 3643.47, 3640.16, 3643.13],
 [2, 3644.25, 3644.96, 3639.98, 3640.95],
 [2, 3643.12, 3645.38, 3641.68, 3644.69],
 [2, 3640.69, 3644.76, 3640.53, 3643.24],
 [2, 3634.39, 3640.81, 3634.31, 3640.59],
 [1, 3631.31, 3634.83, 3629.85, 3634.38],
 [1, 3631.96, 3632.95, 3628.81, 3631.3],
 [1, 3628.75, 3632.46, 3626.78, 3631.91],
 [1, 3633.42, 3634.16, 3626.52, 3628.63],
 [0, 3634.16, 3635.16, 3632.05, 3633.33],
 [0, 3639.43, 3639.43, 3633.61, 3634.23],
 [0, 3641.32, 3642.65, 3639.12, 3639.48],
 [0, 3638.2, 3641.73, 3634.83, 3641.19]
];
let xaueu = [
 [23, 3189.79, 3189.99, 3184.15, 3185.6],
 [23, 3190.27, 3190.44, 3188.15, 3189.78],
 [23, 3187.01, 3191.04, 3186.66, 3190.36],
 [22, 3186.94, 3187.32, 3186.28, 3187.06],
 [22, 3184.23, 3187.94, 3184.23, 3186.93],
 [22, 3185.23, 3185.94, 3183.93, 3184.26],
 [22, 3186.94, 3188.03, 3185.39, 3185.39],
 [20, 3186.21, 3186.25, 3184.71, 3185.82],
 [20, 3186.54, 3188.18, 3185.83, 3186.16],
 [20, 3186.64, 3186.93, 3185.22, 3186.6],
 [20, 3185.73, 3188.11, 3185.07, 3186.62],
 [19, 3186.71, 3188.62, 3185.26, 3185.69],
 [19, 3182.02, 3187.91, 3182.02, 3186.68],
 [19, 3181.17, 3183.06, 3177.09, 3182.03],
 [19, 3180.79, 3187.19, 3179.76, 3180.98],
 [18, 3199.09, 3199.48, 3180.44, 3180.65],
 [18, 3198.44, 3199.76, 3197.82, 3199.06],
 [18, 3197.34, 3199.63, 3197.21, 3198.85],
 [18, 3198.13, 3200.68, 3196.98, 3197.36],
 [17, 3197.98, 3199.83, 3196.89, 3198],
 [17, 3202.78, 3202.88, 3197.04, 3197.7],
 [17, 3202.26, 3205.4, 3201.34, 3202.65],
 [17, 3201.49, 3202.63, 3200.91, 3202.23],
 [16, 3196.51, 3202.88, 3196.48, 3201.46],
 [16, 3197.96, 3200.33, 3191.56, 3196.59],
 [16, 3198.38, 3201.67, 3197.18, 3197.99],
 [16, 3203.21, 3204.24, 3197.74, 3198.37],
 [15, 3204.94, 3205.26, 3201.35, 3203.3],
 [15, 3206.25, 3208.07, 3204.62, 3204.94],
 [15, 3204.47, 3206.07, 3202.65, 3206.07],
 [15, 3199.49, 3204.7, 3198.04, 3204.48],
 [14, 3197.53, 3200.43, 3196.56, 3199.5],
 [14, 3196.87, 3200.16, 3195.99, 3197.77],
 [14, 3201, 3201.9, 3193.89, 3197.03],
 [14, 3206.82, 3207.03, 3198.53, 3202.28],
 [13, 3207.95, 3209.64, 3202.11, 3206.85],
 [13, 3207.89, 3211.93, 3205.66, 3208.53],
 [13, 3209.71, 3210.13, 3204.42, 3207.96],
 [13, 3207.92, 3210.99, 3205.24, 3209.78],
 [12, 3208.82, 3209.63, 3207.27, 3207.86],
 [12, 3207.34, 3209.16, 3205.97, 3208.93],
 [12, 3205.2, 3210.09, 3205.02, 3207.16],
 [12, 3208.68, 3208.68, 3203.31, 3205.31],
 [11, 3207.07, 3209.23, 3204.78, 3208.54],
 [11, 3212.29, 3212.4, 3206.4, 3207.06],
 [11, 3205.05, 3212.48, 3204.77, 3212.12],
 [11, 3206.85, 3207.61, 3204.02, 3205.04],
 [10, 3208.13, 3208.24, 3205.26, 3206.71],
 [10, 3207.44, 3209.5, 3207.22, 3208.13],
 [10, 3206.97, 3209.65, 3206.16, 3207.35],
 [10, 3206.99, 3207.45, 3205.82, 3207.06],
 [9, 3201.22, 3207.89, 3201.22, 3206.9],
 [9, 3206.52, 3207.27, 3201.01, 3201.29],
 [9, 3205.35, 3210.3, 3203.18, 3206.66],
 [9, 3197.9, 3206.39, 3197.66, 3205.35],
 [8, 3194.57, 3198.97, 3194.28, 3197.93],
 [8, 3187.05, 3195.1, 3187.05, 3194.69],
 [8, 3185.94, 3188.51, 3185.22, 3187.12],
 [8, 3183.39, 3186.06, 3183.39, 3185.81],
 [7, 3184.22, 3185.58, 3182.64, 3183.33],
 [7, 3185.18, 3185.52, 3182.58, 3184.31],
 [7, 3183.1, 3186.08, 3182.9, 3185.25],
 [7, 3182.52, 3183.47, 3180.18, 3182.8],
 [6, 3181.01, 3183.03, 3180.99, 3182.67],
 [6, 3185.23, 3185.95, 3181.08, 3181.08],
 [6, 3183.75, 3185.99, 3182.82, 3185.11],
 [6, 3180.88, 3184.51, 3179.73, 3183.7],
 [5, 3183.54, 3185.06, 3180.83, 3180.92],
 [5, 3177.26, 3183.75, 3176.84, 3183.48],
 [5, 3175.17, 3177.42, 3175.08, 3177.35],
 [5, 3173.83, 3176.17, 3173.36, 3175.26],
 [4, 3174.91, 3175.18, 3173.01, 3174.04],
 [4, 3174.82, 3175.48, 3173.2, 3174.93],
 [4, 3173.21, 3175.13, 3172.16, 3174.8],
 [4, 3173.54, 3173.98, 3171.55, 3173.25],
 [3, 3171.5, 3174.29, 3171.45, 3173.54],
 [3, 3170.97, 3172.23, 3170.62, 3171.63],
 [3, 3168.99, 3172.61, 3168.91, 3170.98],
 [3, 3169.98, 3171.7, 3168.11, 3169.04],
 [2, 3170.16, 3171.43, 3165.68, 3169.93],
 [2, 3170.49, 3172.5, 3168.68, 3170.28],
 [2, 3170.9, 3171.67, 3168.68, 3170.59],
 [2, 3177.79, 3178.17, 3168.85, 3170.65],
 [1, 3179.26, 3180.99, 3176.28, 3177.78],
 [1, 3175.3, 3180.48, 3174.14, 3179.26],
 [1, 3180.22, 3183.05, 3173.9, 3175.71],
 [1, 3173.81, 3180.66, 3172.67, 3180.17],
 [0, 3176.18, 3176.96, 3172.99, 3173.83],
 [0, 3176.74, 3176.97, 3174.26, 3176.21],
 [0, 3175.9, 3176.94, 3173.75, 3176.81],
 [0, 3176.11, 3177.41, 3175.58, 3175.86],
 [23, 3175.08, 3176.82, 3174.65, 3175.96],
 [23, 3174.56, 3175.52, 3173.83, 3174.99],
 [23, 3171.13, 3176.62, 3170.74, 3174.59],
 [23, 3169.17, 3171.02, 3168.28, 3170.98],
 [22, 3170.86, 3171.02, 3167.74, 3169.19],
 [22, 3171.69, 3173.52, 3170.25, 3170.84],
 [22, 3173.37, 3174.12, 3171.74, 3171.74],
 [22, 3173.61, 3175.14, 3173.18, 3173.3],
 [20, 3175.72, 3176.39, 3173.85, 3174.74],
 [20, 3175.94, 3176.7, 3175.41, 3175.74],
 [20, 3174.22, 3176.44, 3174.07, 3175.9],
 [20, 3175.98, 3176.76, 3174.24, 3174.24],
 [19, 3174.69, 3176.71, 3174.4, 3176.13],
 [19, 3172.94, 3175.97, 3171.89, 3174.67],
 [19, 3176.82, 3177.22, 3172.63, 3172.94],
 [19, 3176.94, 3177.92, 3176.32, 3176.78],
 [18, 3176.11, 3177.29, 3175.86, 3176.83],
 [18, 3176.13, 3176.44, 3174.8, 3176.09],
 [18, 3175.99, 3177.57, 3175.52, 3176.17],
 [18, 3175.99, 3176.57, 3174.75, 3176.17],
 [17, 3175.74, 3176.9, 3175.26, 3175.99],
 [17, 3172.83, 3176.84, 3172.83, 3175.78],
 [17, 3172.96, 3173.74, 3171.43, 3172.51],
 [17, 3170.16, 3173.35, 3170.13, 3172.91],
 [16, 3172.06, 3172.87, 3169.48, 3170.19],
 [16, 3169.79, 3172.06, 3169.79, 3172.06],
 [16, 3170.33, 3171.74, 3168.84, 3169.61],
 [16, 3173.7, 3174.82, 3170.25, 3170.37],
 [15, 3170.47, 3174.09, 3170.46, 3173.5],
 [15, 3169.63, 3171.37, 3168.69, 3170.52],
 [15, 3166.36, 3169.91, 3165.3, 3169.47],
 [15, 3165.69, 3167.01, 3163.46, 3166.46],
 [14, 3160.22, 3165.71, 3159.9, 3165.63],
 [14, 3162.92, 3163.16, 3159.02, 3160.1],
 [14, 3160.74, 3163.26, 3159.31, 3162.82],
 [14, 3160.7, 3162.57, 3157.7, 3160.64],
 [13, 3157.31, 3160.97, 3155.28, 3160.73],
 [13, 3160.1, 3161.93, 3155.44, 3157.37],
 [13, 3159.33, 3161.23, 3158.17, 3160.06],
 [13, 3158.24, 3160.96, 3157.84, 3159.36],
 [12, 3152.76, 3159.17, 3152.49, 3158.48],
 [12, 3155.18, 3157.11, 3152.15, 3152.61],
 [12, 3158.07, 3159.64, 3152.43, 3155.31],
 [12, 3162.31, 3162.68, 3157.86, 3157.86],
 [11, 3160.58, 3162.87, 3159.71, 3162.26],
 [11, 3165.11, 3165.18, 3160.34, 3160.59],
 [11, 3166.44, 3167.25, 3164.17, 3165.11],
 [11, 3165.61, 3166.86, 3164.46, 3166.54],
 [10, 3164.26, 3165.87, 3163.79, 3165.69],
 [10, 3162.06, 3164.61, 3161.67, 3164.2],
 [10, 3160.6, 3163.3, 3160.55, 3162.02],
 [10, 3161.72, 3162.21, 3159.54, 3160.5],
 [9, 3162.62, 3164.58, 3161.54, 3161.62],
 [9, 3166.63, 3166.94, 3161.95, 3162.71],
 [9, 3161.8, 3167.52, 3161.73, 3166.6],
 [9, 3162.79, 3163.78, 3161.5, 3161.8],
 [8, 3163.67, 3163.9, 3162.51, 3162.87],
 [8, 3160.29, 3163.88, 3160.14, 3163.71],
 [8, 3160.35, 3161.46, 3158.62, 3160.15],
 [8, 3160.37, 3164.12, 3159.61, 3160.3],
 [7, 3160.67, 3161.36, 3159.23, 3160.55],
 [7, 3159.44, 3162.44, 3158.9, 3160.62],
 [7, 3161.44, 3162.07, 3157.05, 3159.46],
 [7, 3162.76, 3163.01, 3159.9, 3161.51],
 [6, 3164.42, 3166.87, 3162.06, 3162.79],
 [6, 3156.06, 3164.69, 3155.12, 3164.69],
 [6, 3152.59, 3156.1, 3151.34, 3155.99],
 [6, 3149.43, 3152.87, 3148.18, 3152.58],
 [5, 3151.75, 3152.79, 3149.12, 3149.43],
 [5, 3149.98, 3152.56, 3149.95, 3151.76],
 [5, 3148.79, 3151.43, 3148.69, 3150.02],
 [5, 3147.42, 3149.08, 3147.27, 3148.85],
 [4, 3147.52, 3148.37, 3147.22, 3147.4],
 [4, 3147.82, 3148.51, 3146.38, 3147.42],
 [4, 3147.35, 3148.29, 3146.69, 3147.83],
 [4, 3149.58, 3150.48, 3146.97, 3147.41],
 [3, 3149.21, 3150.8, 3148.97, 3149.64],
 [3, 3146.35, 3149.25, 3145.83, 3149.21],
 [3, 3144.8, 3146.66, 3143.93, 3146.3],
 [3, 3143.19, 3145.22, 3142.72, 3144.83],
 [2, 3142.64, 3144.86, 3141.96, 3143.22],
 [2, 3147.62, 3148.74, 3142.18, 3142.48],
 [2, 3144.12, 3147.41, 3143.96, 3147.41],
 [2, 3144.59, 3146.55, 3143.44, 3144.14],
 [1, 3142.81, 3145.18, 3141.47, 3144.62],
 [1, 3143.87, 3146.77, 3142.36, 3142.69],
 [1, 3147.61, 3149.07, 3143.81, 3144.08],
 [1, 3145.24, 3147.95, 3141.77, 3147.51],
 [0, 3144.56, 3145.78, 3143.97, 3145.17],
 [0, 3143.55, 3145.19, 3143.49, 3144.57],
 [0, 3145.05, 3145.23, 3142.07, 3143.36],
 [0, 3140.68, 3145.11, 3140.68, 3144.94],
 [23, 3140.14, 3141.69, 3140.14, 3140.79],
 [23, 3142.81, 3143.1, 3140.14, 3140.14],
 [23, 3140.77, 3143.22, 3140.31, 3142.77],
 [23, 3141.43, 3142.48, 3140.21, 3140.73],
 [22, 3143.62, 3143.94, 3140.92, 3141.44],
 [22, 3144, 3144, 3142.22, 3143.52],
 [22, 3140.34, 3144.38, 3138.34, 3143.98],
 [22, 3136.85, 3140.27, 3135.52, 3140.26],
 [20, 3137.62, 3138.12, 3136.79, 3137.8],
 [20, 3136.08, 3138.35, 3135.78, 3137.64],
 [20, 3135.11, 3136.23, 3134.18, 3136.12],
 [20, 3136.13, 3136.14, 3134.53, 3135.02],
 [19, 3135.01, 3137.14, 3134.65, 3136.21],
 [19, 3135.94, 3135.94, 3133.82, 3135.01],
 [19, 3135.25, 3136.45, 3134.75, 3135.98],
 [19, 3135.52, 3135.89, 3134.62, 3135.2],
 [18, 3134.47, 3136.11, 3133.02, 3135.48],
 [18, 3134.24, 3134.53, 3132.8, 3134.45],
 [18, 3131.47, 3134.72, 3131.45, 3134.15],
 [18, 3130.5, 3132.3, 3130.45, 3131.42],
 [17, 3125.94, 3130.75, 3125.82, 3130.42],
 [17, 3124.7, 3125.91, 3124.3, 3125.91],
 [17, 3123.68, 3125.13, 3123.53, 3124.61],
 [17, 3120.95, 3123.92, 3120.89, 3123.7],
 [16, 3123.65, 3124.06, 3120.71, 3120.87],
 [16, 3123.93, 3124.44, 3122.88, 3123.7],
 [16, 3124.07, 3125.14, 3122.58, 3123.89],
 [16, 3123.44, 3127.03, 3123.44, 3124.02],
 [15, 3124.42, 3125.34, 3122.91, 3123.47],
 [15, 3126.3, 3126.94, 3123.35, 3124.5],
 [15, 3124.65, 3129.18, 3124.17, 3126.33],
 [15, 3119.3, 3124.79, 3118.91, 3124.62],
 [14, 3114.55, 3120.63, 3114.46, 3118.82],
 [14, 3115.15, 3116.44, 3113.23, 3114.54],
 [14, 3113.01, 3115.43, 3109.19, 3115.13],
 [14, 3115.43, 3116.36, 3111.32, 3113.02],
 [13, 3111.22, 3116.17, 3108.59, 3115.53],
 [13, 3111.31, 3113.05, 3109.03, 3111.13],
 [13, 3108.86, 3111.34, 3107.77, 3111.08],
 [13, 3109.35, 3109.65, 3103, 3108.91],
 [12, 3107.89, 3109.92, 3106.54, 3109.31],
 [12, 3108.7, 3111.03, 3107.4, 3107.89],
 [12, 3109.01, 3110.49, 3108.35, 3108.7],
 [12, 3108.5, 3110.23, 3106.56, 3109.08],
 [11, 3104.75, 3108.64, 3104.61, 3108.48],
 [11, 3105.41, 3106.02, 3103.58, 3104.61],
 [11, 3107.64, 3107.85, 3105.43, 3105.49],
 [11, 3108.12, 3109.63, 3107.11, 3107.63],
 [10, 3109.32, 3109.4, 3107.67, 3108.34],
 [10, 3109.26, 3109.94, 3107.81, 3109.33],
 [10, 3111.02, 3111.02, 3109.09, 3109.24],
 [10, 3111.02, 3111.17, 3108.44, 3110.9],
 [9, 3109.18, 3111.13, 3108.82, 3111],
 [9, 3107.93, 3109.34, 3107.67, 3109.19],
 [9, 3107.93, 3109.06, 3107.79, 3107.93],
 [9, 3108.22, 3109.09, 3107.14, 3107.93],
 [8, 3108.65, 3109.75, 3107.79, 3108.21],
 [8, 3106.99, 3109.25, 3106.4, 3108.62],
 [8, 3105.72, 3108.17, 3104.25, 3107],
 [8, 3104.4, 3107.66, 3104.03, 3105.74],
 [7, 3103.32, 3106.22, 3103.32, 3104.46],
 [7, 3102.33, 3103.4, 3101.19, 3103.37],
 [7, 3101.11, 3103.2, 3100.57, 3102.36],
 [7, 3099.48, 3102.27, 3098.84, 3101.23],
 [6, 3098.85, 3099.75, 3097.96, 3099.42],
 [6, 3101.04, 3101.87, 3096.41, 3098.88],
 [6, 3101.27, 3101.94, 3098.07, 3101.05],
 [6, 3102.28, 3103.98, 3100.89, 3101.25],
 [5, 3104.9, 3105.58, 3102.12, 3102.31],
 [5, 3106.7, 3106.72, 3102.52, 3105],
 [5, 3106.19, 3107.99, 3105.09, 3106.69],
 [5, 3107.54, 3108.88, 3106.15, 3106.18],
 [4, 3107.41, 3108.73, 3106.98, 3107.64],
 [4, 3106.41, 3108.26, 3106.31, 3107.5],
 [4, 3104.3, 3106.61, 3103.83, 3106.44],
 [4, 3101.04, 3104.72, 3101.04, 3104.33],
 [3, 3101, 3101.65, 3099.48, 3101.09],
 [3, 3098.92, 3100.79, 3098.56, 3100.71],
 [3, 3094.89, 3100.21, 3094.35, 3098.99],
 [3, 3096.21, 3096.48, 3093.4, 3094.89],
 [2, 3095.25, 3098.78, 3093.93, 3096.32],
 [2, 3095.98, 3096.42, 3093.37, 3095.28],
 [2, 3097.23, 3097.44, 3094.74, 3095.88],
 [2, 3091.11, 3097.52, 3090.29, 3097.37],
 [1, 3095.18, 3095.42, 3084.65, 3091.06],
 [1, 3096.45, 3097.09, 3093.93, 3095.15],
 [1, 3097.16, 3099.17, 3096.05, 3096.47],
 [1, 3088.31, 3098.82, 3088.01, 3097.2],
 [0, 3088.49, 3089.43, 3087.23, 3088.26],
 [0, 3088.68, 3089.02, 3086.93, 3088.47],
 [0, 3090.06, 3090.21, 3087.84, 3088.64],
 [0, 3087.84, 3090.53, 3087.8, 3090.15],
 [23, 3085.95, 3088.01, 3085.94, 3087.8],
 [23, 3087.07, 3087.63, 3085.68, 3085.92],
 [23, 3088.7, 3088.81, 3087.03, 3087.07],
 [23, 3088.32, 3089.6, 3088.12, 3088.71],
 [22, 3089.89, 3089.99, 3087.49, 3088.3],
 [22, 3089.43, 3090.56, 3088.56, 3089.89],
 [22, 3090.29, 3091.07, 3089.33, 3089.51],
 [22, 3091.18, 3091.4, 3089.68, 3090.06],
 [21, 3091.7, 3091.7, 3091.7, 3091.7],
 [20, 3092.65, 3093.4, 3092.02, 3092.1],
 [20, 3093.77, 3093.99, 3092.13, 3092.59],
 [20, 3093.62, 3094.19, 3093.22, 3093.75],
 [20, 3094.27, 3094.91, 3093.4, 3093.62],
 [19, 3091.97, 3094.89, 3091.86, 3094.34],
 [19, 3090.09, 3092.26, 3089.99, 3091.95],
 [19, 3089.13, 3090.95, 3088.91, 3090.15],
 [19, 3089.06, 3089.77, 3088.56, 3089.18],
 [18, 3090.92, 3091.29, 3089.15, 3089.27],
 [18, 3090.25, 3091.35, 3089.72, 3090.89],
 [18, 3089.05, 3090.41, 3088.95, 3090.3],
 [18, 3091, 3091.22, 3088.67, 3089.07],
 [17, 3090.22, 3091.67, 3090.05, 3090.91],
 [17, 3091.13, 3091.4, 3089.67, 3090.17],
 [17, 3090.9, 3092.12, 3089.88, 3090.9],
 [17, 3093.27, 3093.53, 3090.43, 3090.92],
 [16, 3093.87, 3094.81, 3092.66, 3093.43],
 [16, 3094.5, 3095.43, 3093.55, 3093.88],
 [16, 3093.21, 3096.14, 3093.09, 3094.57],
 [16, 3091.28, 3094.39, 3089.52, 3093.26],
 [15, 3091.47, 3092.61, 3090.86, 3091.08],
 [15, 3087.47, 3091.91, 3087.47, 3091.58],
 [15, 3090.1, 3090.34, 3086.85, 3087.45],
 [15, 3089.83, 3091.4, 3088.28, 3090.56],
 [14, 3094.71, 3096.36, 3089.77, 3089.81],
 [14, 3087.1, 3095.38, 3086.72, 3095.2],
 [14, 3092.01, 3092.09, 3086.67, 3087.07],
 [14, 3095.07, 3098.74, 3090.77, 3093.94],
 [13, 3089.01, 3097.19, 3087.03, 3090.97],
 [13, 3100.53, 3101.38, 3088.94, 3089.3],
 [13, 3103.02, 3105.54, 3098.99, 3100.51],
 [13, 3105.6, 3107.45, 3100.91, 3102.85],
 [12, 3107.66, 3108.72, 3104.88, 3105.59],
 [12, 3106, 3108.68, 3105.06, 3107.65],
 [12, 3103.13, 3107.13, 3102.46, 3106.22],
 [12, 3101.07, 3104.02, 3101.07, 3103.12],
 [11, 3101.82, 3102.77, 3099.4, 3101.07],
 [11, 3099.25, 3102, 3098.32, 3101.79],
 [11, 3099.89, 3103.17, 3098.99, 3099.15],
 [11, 3098.05, 3101.38, 3097.57, 3099.86],
 [10, 3097.59, 3099.22, 3097.05, 3097.96],
 [10, 3100.17, 3100.93, 3097.54, 3097.65],
 [10, 3099.1, 3100.22, 3097.78, 3100.03],
 [10, 3101.53, 3102.43, 3098.76, 3099.1],
 [9, 3099.46, 3101.81, 3099.37, 3101.53],
 [9, 3100.83, 3102.04, 3097.52, 3099.45],
 [9, 3097.8, 3102.16, 3097.1, 3100.69],
 [9, 3098.97, 3100.4, 3097.66, 3097.93],
 [8, 3095.51, 3099.56, 3094.84, 3099.03],
 [8, 3092.4, 3096.16, 3090.91, 3095.55],
 [8, 3090.67, 3092.94, 3090.01, 3092.4],
 [8, 3092.39, 3092.87, 3089.44, 3090.63],
 [7, 3091.45, 3092.64, 3089.71, 3092.48],
 [7, 3086.16, 3092.01, 3085.62, 3091.44],
 [7, 3084.76, 3088.1, 3083.59, 3086.25],
 [7, 3083.81, 3084.92, 3082.39, 3084.68],
 [6, 3083.37, 3085.37, 3082.94, 3083.98],
 [6, 3086.5, 3087.08, 3082.8, 3083.37],
 [6, 3086.94, 3087.93, 3083.27, 3086.59],
 [6, 3096.95, 3097.08, 3083.64, 3087.06],
 [5, 3098.81, 3099.6, 3096.21, 3096.94],
 [5, 3100.55, 3101.06, 3096.58, 3098.59],
 [5, 3099.57, 3101.44, 3099.04, 3100.53],
 [5, 3097.63, 3099.99, 3096.67, 3099.51],
 [4, 3097.84, 3099.11, 3097.36, 3097.59],
 [4, 3097.91, 3098.46, 3096.6, 3097.92],
 [4, 3097.14, 3098.08, 3096.51, 3097.83],
 [4, 3097.25, 3097.47, 3095.94, 3097.15],
 [3, 3098.75, 3098.96, 3096.41, 3097.19],
 [3, 3099.6, 3099.71, 3098.46, 3098.7],
 [3, 3098.97, 3099.66, 3097.88, 3099.55],
 [3, 3100.59, 3100.97, 3097.87, 3099.01],
 [2, 3099.17, 3101.33, 3098.92, 3100.57],
 [2, 3097.65, 3100.76, 3096.9, 3099.08],
 [2, 3099.92, 3099.92, 3097.74, 3097.79],
 [2, 3095.62, 3100.05, 3093.87, 3099.83],
 [1, 3093.66, 3096.55, 3091.89, 3095.61],
 [1, 3093.01, 3096.2, 3091.72, 3093.7],
 [1, 3098.51, 3098.51, 3092.57, 3093.17],
 [1, 3099.49, 3102.02, 3093.24, 3098.38],
 [0, 3096.59, 3099.66, 3096.59, 3099.46],
 [0, 3098.17, 3099.01, 3094.99, 3096.61],
 [0, 3100.12, 3101.71, 3097.25, 3098.18],
 [0, 3102.93, 3103.35, 3098.71, 3100.15],
 [23, 3102.34, 3103.71, 3102.22, 3102.76],
 [23, 3104.84, 3105.05, 3100.93, 3102.36],
 [23, 3102, 3105.98, 3101.8, 3104.85],
 [23, 3099.01, 3102.08, 3098.67, 3102.08],
 [22, 3099.5, 3100.49, 3098.33, 3099.09],
 [22, 3099.94, 3100.6, 3097.01, 3099.27],
 [22, 3100.41, 3101.78, 3098.76, 3099.91],
 [22, 3097.68, 3101.9, 3094.35, 3100.68],
 [21, 3097.6, 3097.6, 3097.6, 3097.6],
 [20, 3096.04, 3097.3, 3095.39, 3096.55],
 [20, 3098.1, 3098.9, 3096.1, 3096.1],
 [20, 3094.4, 3098.8, 3094.4, 3098.8],
 [20, 3095, 3096, 3094.8, 3096],
 [19, 3094.7, 3095.9, 3092.5, 3095.9],
 [19, 3093.1, 3095.3, 3091, 3094.9],
 [19, 3083.4, 3094.5, 3083.4, 3094.5],
 [19, 3083.4, 3090.9, 3083.4, 3084.1],
 [18, 3091.4, 3091.4, 3085.5, 3085.5],
 [18, 3097.58, 3098.6, 3096.16, 3096.87],
 [18, 3100.92, 3103.17, 3094.1, 3099.06],
 [18, 3110.05, 3112.27, 3074.86, 3100.74],
 [17, 3109.07, 3111.96, 3108.8, 3110.2],
 [17, 3107.54, 3109.36, 3107.41, 3109.05],
 [17, 3108.08, 3108.94, 3104.78, 3107.43],
 [17, 3108.68, 3109.11, 3107.66, 3108.13],
 [16, 3110.12, 3111.01, 3108.04, 3108.55],
 [16, 3110.89, 3111.12, 3109.5, 3110.07],
 [16, 3111.6, 3111.91, 3110.42, 3110.82],
 [16, 3110.46, 3113.35, 3110.46, 3111.58],
 [15, 3110.49, 3110.99, 3109.12, 3110.37],
 [15, 3109.84, 3112.47, 3109.66, 3110.5],
 [15, 3109.8, 3110.93, 3109.03, 3109.9],
 [15, 3109.23, 3111.08, 3108.8, 3109.87],
 [14, 3109.88, 3110.64, 3107.16, 3109.14],
 [14, 3107.12, 3109.81, 3106.61, 3109.81],
 [14, 3108.5, 3108.66, 3105.01, 3106.66],
 [14, 3104.31, 3108.68, 3103.55, 3108.32],
 [13, 3104.66, 3105.8, 3102.46, 3104.31],
 [13, 3103.12, 3107.32, 3102.92, 3104.56],
 [13, 3105.28, 3105.89, 3100.74, 3103.2],
 [13, 3105.92, 3106.61, 3101.1, 3105.15],
 [12, 3103.76, 3107.17, 3103.3, 3106],
 [12, 3101.43, 3104.18, 3100.56, 3103.69],
 [12, 3100.07, 3102.3, 3099.96, 3101.51],
 [12, 3096.48, 3101.85, 3096.31, 3100.06],
 [11, 3097.05, 3098.45, 3094.63, 3096.42],
 [11, 3098.41, 3099.32, 3096.48, 3096.9],
 [11, 3093.69, 3098.99, 3093.51, 3098.59],
 [11, 3093.25, 3094.79, 3091.78, 3093.75],
 [10, 3095.82, 3096.45, 3091.25, 3093.31],
 [10, 3097.68, 3097.76, 3094.71, 3095.83],
 [10, 3096.86, 3098.92, 3096.56, 3097.66],
 [10, 3096.32, 3097.92, 3093.05, 3096.68],
 [9, 3096.59, 3097.6, 3095.97, 3096.13],
 [9, 3097.44, 3099, 3096.47, 3096.72],
 [9, 3096.74, 3098.77, 3096.53, 3097.45],
 [9, 3093.14, 3097.12, 3092.31, 3096.75],
 [8, 3093.09, 3094.6, 3092.31, 3093.23],
 [8, 3095.58, 3096.69, 3092.28, 3093.22],
 [8, 3095.53, 3095.94, 3093.59, 3095.65],
 [8, 3097.07, 3097.11, 3094.61, 3095.5],
 [7, 3098.97, 3099.18, 3096.64, 3097.12],
 [7, 3096.77, 3099.91, 3096.28, 3098.92],
 [7, 3099.62, 3100.99, 3096.6, 3097.06],
 [7, 3099.75, 3102.12, 3098.06, 3099.72],
 [6, 3097.52, 3101.16, 3097.24, 3099.77],
 [6, 3100.82, 3101.56, 3096.7, 3097.46],
 [6, 3101.36, 3103.26, 3100.28, 3100.77],
 [6, 3102.57, 3103.47, 3100.43, 3101.34],
 [5, 3103.16, 3103.73, 3101.18, 3102.65],
 [5, 3104.34, 3105.12, 3100.36, 3103.22],
 [5, 3106.18, 3106.54, 3102.89, 3104.32],
 [5, 3104.98, 3108.16, 3104.77, 3106.22],
 [4, 3105.77, 3106, 3104.54, 3105.05],
 [4, 3105.35, 3106.09, 3105.12, 3105.65],
 [4, 3106.53, 3106.87, 3105.15, 3105.6],
 [4, 3106.37, 3106.95, 3106.01, 3106.51],
 [3, 3105.92, 3106.88, 3105.01, 3106.36],
 [3, 3104.89, 3106.16, 3104.8, 3105.94],
 [3, 3105.22, 3106.51, 3104.74, 3105.04],
 [3, 3105.87, 3106.44, 3103.95, 3105.21],
 [2, 3105.25, 3107.21, 3104.64, 3105.86],
 [2, 3102.02, 3105.44, 3100.43, 3105.21],
 [2, 3105.12, 3105.17, 3101.63, 3102.04],
 [2, 3103.42, 3105.26, 3101.05, 3105.18],
 [1, 3102.34, 3104.39, 3100.24, 3103.56],
 [1, 3108.6, 3108.74, 3101.58, 3102.42],
 [1, 3112.58, 3112.94, 3108.9, 3108.9],
 [1, 3112.7, 3113.57, 3111.9, 3112.62],
 [0, 3113.81, 3113.81, 3112.13, 3112.72],
 [0, 3112.3, 3114.13, 3112.07, 3113.94],
 [0, 3112.55, 3112.78, 3111.16, 3112.34],
 [0, 3111.97, 3113.45, 3111.35, 3112.56],
 [23, 3111.47, 3112.82, 3110.74, 3111.9],
 [23, 3111.97, 3112.09, 3111.16, 3111.5],
 [23, 3112.11, 3112.86, 3111.48, 3111.92],
 [23, 3111.28, 3113.14, 3110.99, 3112.11],
 [22, 3111.64, 3111.96, 3110.44, 3111.32],
 [22, 3110.12, 3111.71, 3110.06, 3111.66],
 [22, 3110.86, 3110.98, 3110, 3110.1],
 [22, 3109.25, 3111.13, 3109.22, 3110.96],
 [20, 3112.73, 3112.73, 3108.92, 3109.28],
 [20, 3112.81, 3113.15, 3112.07, 3112.7],
 [20, 3112.75, 3113.03, 3111.79, 3112.76],
 [20, 3110.89, 3112.81, 3110.89, 3112.75],
 [19, 3110.77, 3112.31, 3110.64, 3110.76],
 [19, 3109.42, 3110.77, 3109.23, 3110.76],
 [19, 3109.79, 3110.6, 3109.44, 3109.59],
 [19, 3110.06, 3110.34, 3108.67, 3109.81],
 [18, 3109.46, 3111.15, 3109.41, 3110.01],
 [18, 3108.31, 3109.7, 3108.22, 3109.48],
 [18, 3107.58, 3108.54, 3106.81, 3108.29],
 [18, 3107.75, 3107.75, 3106.75, 3107.6],
 [17, 3106.85, 3108.26, 3106.51, 3107.75],
 [17, 3107.08, 3107.43, 3106.05, 3106.85],
 [17, 3105.36, 3107.57, 3104.88, 3106.99],
 [17, 3109.78, 3110.4, 3105.4, 3105.4],
 [16, 3105.89, 3110.73, 3105.89, 3109.77],
 [16, 3109.98, 3110.47, 3105.4, 3105.89],
 [16, 3110.08, 3111.25, 3109.02, 3110.07],
 [16, 3111.37, 3112.57, 3109.32, 3110.1],
 [15, 3108.91, 3112.65, 3108.68, 3111.43],
 [15, 3110.01, 3110.45, 3107.56, 3108.79],
 [15, 3112.28, 3115.92, 3109.75, 3109.75],
 [15, 3110.45, 3113.44, 3108.43, 3112.49],
 [14, 3114.47, 3115.86, 3109.9, 3110.32],
 [14, 3118.35, 3121.17, 3114.29, 3114.75],
 [14, 3124.93, 3126.69, 3116.99, 3118.31],
 [14, 3125.38, 3126.7, 3121.54, 3124.85],
 [13, 3124.61, 3127.99, 3124.61, 3125.55],
 [13, 3125.05, 3127.97, 3122.97, 3124.54],
 [13, 3122.49, 3125.08, 3120.5, 3124.98],
 [13, 3125.21, 3125.21, 3120.47, 3122.51],
 [12, 3127.11, 3127.2, 3123.45, 3125.31],
 [12, 3127.76, 3129.55, 3124.69, 3127.02],
 [12, 3129.99, 3130.95, 3127.65, 3128.03],
 [12, 3129.35, 3130.81, 3127.74, 3129.95],
 [11, 3128.67, 3131.56, 3127.36, 3129.29],
 [11, 3128.79, 3129.93, 3127.45, 3128.77],
 [11, 3129, 3129.03, 3126.31, 3128.76],
 [11, 3127.63, 3129.62, 3126.51, 3128.96],
 [10, 3128.72, 3130.1, 3126.86, 3127.71],
 [10, 3130.2, 3130.89, 3128.02, 3128.78],
 [10, 3131.15, 3131.73, 3129.37, 3130.22],
 [10, 3130.25, 3131.84, 3130, 3131.16],
 [9, 3128.48, 3130.83, 3127.89, 3130.29],
 [9, 3129.39, 3130.58, 3128, 3128.41],
 [9, 3129.86, 3132.25, 3128.74, 3129.46],
 [9, 3132.05, 3132.05, 3128.66, 3129.7],
 [8, 3133.68, 3134.31, 3131.75, 3132.19],
 [8, 3132.01, 3133.91, 3130.29, 3133.77],
 [8, 3132.74, 3133.56, 3130.26, 3132.06],
 [8, 3125.61, 3132.96, 3125.55, 3132.77],
 [7, 3127.33, 3128.06, 3124.19, 3125.65],
 [7, 3129.24, 3129.65, 3126.75, 3127.3],
 [7, 3130.72, 3131.23, 3127.7, 3129.21],
 [7, 3133.06, 3133.24, 3129.06, 3130.65],
 [6, 3130.72, 3134.36, 3130.04, 3133.22],
 [6, 3126.89, 3130.83, 3126.09, 3130.68],
 [6, 3125.62, 3127.42, 3124.83, 3127.04],
 [6, 3126.62, 3127.83, 3125.45, 3125.63],
 [5, 3126.15, 3126.83, 3125.11, 3126.67],
 [5, 3127.9, 3128.01, 3126.02, 3126.27],
 [5, 3127.48, 3128.11, 3127.07, 3127.84],
 [5, 3128.22, 3128.54, 3126.75, 3127.41],
 [4, 3127.36, 3129.6, 3127.1, 3128.33],
 [4, 3126.56, 3127.52, 3125.05, 3127.43],
 [4, 3126.55, 3127.33, 3125.92, 3126.39],
 [4, 3124.64, 3126.62, 3124.59, 3126.56],
 [3, 3123.46, 3125.59, 3123.22, 3124.63],
 [3, 3126.18, 3126.66, 3122.98, 3123.45],
 [3, 3125.56, 3126.54, 3125.15, 3126.13],
 [3, 3122.59, 3125.61, 3122.06, 3125.47],
 [2, 3124.04, 3124.94, 3121.16, 3122.85],
 [2, 3126.52, 3126.62, 3122.96, 3123.85],
 [2, 3127.56, 3127.96, 3125.61, 3126.41],
 [2, 3126.66, 3128.65, 3125.37, 3127.54],
 [1, 3126.59, 3127.4, 3125.22, 3126.74],
 [1, 3128.26, 3130.45, 3126.52, 3126.58],
 [1, 3128.69, 3129.48, 3126.49, 3128.44],
 [1, 3134.13, 3136.65, 3127.97, 3128.6],
 [0, 3133.03, 3134.73, 3131.4, 3134.05],
 [0, 3131.9, 3133.56, 3130.99, 3133.05],
 [0, 3128.06, 3132.02, 3127.7, 3131.82],
 [0, 3125.84, 3128.04, 3125.16, 3128],
 [23, 3126.9, 3126.9, 3124.82, 3125.89],
 [23, 3126.65, 3126.96, 3126.16, 3126.81],
 [23, 3127.5, 3128.09, 3125.99, 3126.7],
 [23, 3127.31, 3128.66, 3127.06, 3127.54],
 [22, 3127, 3127.6, 3126.42, 3127.43],
 [22, 3126.9, 3127.93, 3126.65, 3127],
 [22, 3126.46, 3126.93, 3125.23, 3126.89],
 [22, 3128.83, 3128.88, 3125.41, 3126.57],
 [20, 3129.8, 3129.9, 3127.8, 3127.91],
 [20, 3128.84, 3130.01, 3128.48, 3129.86],
 [20, 3128.16, 3129.2, 3127.65, 3128.87],
 [20, 3128.55, 3128.93, 3127.32, 3128.18],
 [19, 3128.6, 3129.79, 3128.31, 3128.65],
 [19, 3125.68, 3128.57, 3125.57, 3128.44],
 [19, 3126.46, 3127.33, 3125.62, 3125.62],
 [19, 3124.13, 3126.48, 3123.72, 3126.42],
 [18, 3125.52, 3125.8, 3123.1, 3124.06],
 [18, 3126.7, 3127.66, 3123.58, 3125.5],
 [18, 3125.49, 3127.24, 3124.64, 3126.92],
 [18, 3127.81, 3127.9, 3125.4, 3125.4],
 [17, 3127.62, 3128.27, 3126.42, 3127.84],
 [17, 3128.59, 3129.88, 3126.65, 3127.51],
 [17, 3129.11, 3130.05, 3128.08, 3128.52],
 [17, 3128.98, 3130.43, 3128.37, 3128.97],
 [16, 3127.72, 3130.62, 3124.39, 3128.91],
 [16, 3132.99, 3133.47, 3126.16, 3127.67],
 [16, 3128.57, 3133.03, 3127.45, 3132.94],
 [16, 3126.67, 3129.38, 3123.45, 3128.34],
 [15, 3118.91, 3127.95, 3118.32, 3126.72],
 [15, 3117.23, 3119.33, 3115.81, 3118.94],
 [15, 3116.26, 3117.78, 3115.1, 3117.18],
 [15, 3115.89, 3117.3, 3115.19, 3116.34],
 [14, 3115.36, 3116.39, 3114.08, 3115.74],
 [14, 3111.77, 3115.4, 3110.72, 3115.37],
 [14, 3114.04, 3114.14, 3111.03, 3111.8],
 [14, 3110.19, 3114.26, 3107.92, 3113.52],
 [13, 3113.3, 3114.51, 3108.88, 3110],
 [13, 3106.63, 3114.44, 3106.14, 3113.21],
 [13, 3102.49, 3106.65, 3101.93, 3106.51],
 [13, 3101.26, 3103.15, 3099.58, 3102.41],
 [12, 3097.69, 3102.2, 3096.69, 3101.28],
 [12, 3092.97, 3097.96, 3091.75, 3097.33],
 [12, 3094.06, 3094.06, 3090.1, 3092.94],
 [12, 3097.12, 3097.39, 3093.72, 3093.94],
 [11, 3101.74, 3101.82, 3096.6, 3097.11],
 [11, 3099.26, 3101.77, 3098.44, 3101.6],
 [11, 3098.55, 3100.63, 3098.55, 3099.28],
 [11, 3097.09, 3098.57, 3095.91, 3098.47],
 [10, 3098.77, 3099.2, 3096.08, 3097.07],
 [10, 3100.41, 3100.72, 3098.13, 3098.8],
 [10, 3101.58, 3102.17, 3099.03, 3100.39],
 [10, 3099.89, 3101.67, 3099.2, 3101.57],
 [9, 3096.41, 3100.16, 3095.25, 3099.87],
 [9, 3098.95, 3098.96, 3095.16, 3096.63],
 [9, 3104.39, 3104.87, 3098.59, 3098.98],
 [9, 3106, 3106.02, 3103.03, 3104.4],
 [8, 3104.19, 3106.06, 3101.94, 3105.99],
 [8, 3102.42, 3104.98, 3102.22, 3104.21],
 [8, 3103.3, 3103.69, 3101.26, 3102.54],
 [8, 3105.46, 3106.82, 3103.11, 3103.11],
 [7, 3102.61, 3106.2, 3102.11, 3105.37],
 [7, 3098.13, 3102.69, 3097.79, 3102.56],
 [7, 3098.61, 3098.68, 3095.91, 3098.15],
 [7, 3101.38, 3101.55, 3097.93, 3098.71],
 [6, 3105.3, 3106.16, 3101.67, 3101.71],
 [6, 3107.72, 3109.9, 3104.82, 3105.4],
 [6, 3106.32, 3108.71, 3105.02, 3107.8],
 [6, 3106.64, 3107.03, 3105.26, 3106.27],
 [5, 3106.89, 3107.72, 3106.35, 3106.74],
 [5, 3107.92, 3108.47, 3106.17, 3106.93],
 [5, 3105.26, 3107.93, 3104.75, 3107.74],
 [5, 3106.7, 3106.94, 3104.65, 3105.22],
 [4, 3106.33, 3107.21, 3105.64, 3106.81],
 [4, 3106.54, 3106.96, 3106.09, 3106.32],
 [4, 3107.48, 3107.56, 3105.6, 3106.46],
 [4, 3107.98, 3108.23, 3106.75, 3107.53],
 [3, 3106.64, 3108.14, 3106.61, 3107.97],
 [3, 3105.85, 3107.95, 3105.58, 3106.67],
 [3, 3106.11, 3106.48, 3104.2, 3105.86],
 [3, 3104.6, 3106.38, 3103.78, 3106.14],
 [2, 3107.52, 3108.14, 3103.82, 3104.63],
 [2, 3107.15, 3108.46, 3105.92, 3107.9],
 [2, 3104.84, 3108.51, 3104.77, 3107.23],
 [2, 3098.98, 3104.92, 3098.81, 3104.72],
 [1, 3096.47, 3099.18, 3095.45, 3098.97],
 [1, 3096.81, 3097.72, 3093.96, 3096.41],
 [1, 3094.77, 3097.32, 3093.13, 3096.74],
 [1, 3098.28, 3099.07, 3092.74, 3094.78],
 [0, 3099.55, 3100.47, 3097.96, 3098.31],
 [0, 3104.5, 3104.5, 3099.06, 3099.49],
 [0, 3105.34, 3106.77, 3104.32, 3104.53],
 [0, 3102.76, 3105.62, 3099.96, 3105.18]
];

/*
let data = (``).split(/\n/); // api response

const regex = /\d{4}(\.\d+)?/g;

function extractOHLC(dataString) {
 let mat = dataString.match(regex);
 if (!mat || mat.length < 4) {
  return {}; // Return null if not enough data is found
 }
 mat = mat.slice(1, 5).map(Number);
 mat.unshift(+dataString.match(/(\d{2}):/)[1]);
 
 return mat;
}

data = data.map(extractOHLC);
document.body.innerHTML += JSON.stringify(data);
*/

let xauusd = [];
let xaueur = [];

for (let i = start; i < Math.min(LookBackPeriod + start, xaueu.length); i++) {
 xauusd.push({ time: xauus[i][0], open: xauus[i][1], high: xauus[i][2], low: xauus[i][3], close: xauus[i][4] });
 
 xaueur.push({ time: xaueu[i][0], open: xaueu[i][1], high: xaueu[i][2], low: xaueu[i][3], close: xaueu[i][4] });
}

let active = 'XAUUSD';

let map = {
 'XAUEUR': xaueur,
 'XAUUSD': xauusd
}

document.getElementById('curP').textContent = active;

function OnTick() {
 // Before processing, check the following
 // operate only once per new bar 
 /* let currentTime = new Date().getMinutes();// TimeCurrent();
  if (currentTime == lastTime) return;
  lastTime = currentTime;
 */
 // quick filter: spread 
 /* double spread = (SymbolInfoDouble(_Symbol, SYMBOL_ASK) - SymbolInfoDouble(_Symbol, SYMBOL_BID)) / pip;
  if (spread > MaxSpread_pips) return;
  */
 let rates = map[active];
 if (xauusd[0].time >= 15) {
  console.log('Trading closed for the day. Time is ', xauusd[0].time);
  candlesArr = rates.slice();
  candlesArr.reverse();
  if (candles) candles.drawCandles(candlesArr);
  return;
 }
 
 // 1. Get the latest candle data
 /* MqlRates rates[];
  int copied = CopyRates(_Symbol, _Period, 0, 6, rates);
  
  if (copied < 6) {
   Print("Not enough historical data available. Need at least ", 6, " candles.");
   return;
  }
  */
 
 let currentCandle = analyzer.PopulateCandleData(rates);

  analyzer.UpdateRelevantCandles(currentCandle, rates);
   
  let smt = CheckSMT(xauusd, xaueur);

 console.log(smt);
  if(smt.signal != 0) analyzer.m_globalMemory.smtDivergenceDetected = smt.signal;
  if(smt.confirmed) analyzer.m_globalMemory.smtDivergenceConfirmed = smt.signal;
  // Todo:
  // Track previous divergences and conflicts 
  
  analyzer.UpdateGlobalMemory(currentCandle, rates);
  console.log(analyzer.m_globalMemory);
 // let signal = usingLogRe ? PredictSignalUsingLR() : GetSignal();
 // console.log("Analysis Complete. Final Signal: ", signal);
 
 candlesArr = rates.slice();
 candlesArr.reverse();
 if (candles) candles.drawCandles(candlesArr);
}

chartType.onclick = function() {
 start++;
 xauusd = [];
 xaueur = [];
 
 for (let i = start; i < Math.min(LookBackPeriod + start, xaueu.length); i++) {
  xauusd.push({ time: xauus[i][0], open: xauus[i][1], high: xauus[i][2], low: xauus[i][3], close: xauus[i][4] });
  
  xaueur.push({ time: xaueu[i][0], open: xaueu[i][1], high: xaueu[i][2], low: xaueu[i][3], close: xaueu[i][4] })
 }
 
 map = {
  'XAUEUR': xaueur,
  'XAUUSD': xauusd
 }
 console.log(start);
 OnTick();
}

settings.onclick = function() {
 start--;
 xauusd = [];
 xaueur = [];
 
 for (let i = start; i < Math.min(LookBackPeriod + start, xaueu.length); i++) {
  xauusd.push({ time: xauus[i][0], open: xauus[i][1], high: xauus[i][2], low: xauus[i][3], close: xauus[i][4] });
  
  xaueur.push({ time: xaueu[i][0], open: xaueu[i][1], high: xaueu[i][2], low: xaueu[i][3], close: xaueu[i][4] })
 }
 
 map = {
  'XAUEUR': xaueur,
  'XAUUSD': xauusd
 }
 console.log(start);
 OnTick();
}

/*
let interval = setInterval(() => {
 OnTick();
 start--;
 if(start == 0) {
  clearInterval(interval);
  console.log('Done');
 }
}, 500);
*/

class CEnsembleAnalyzer {
 constructor() {
  this.m_globalMemory = globalMemory();
  this.m_relevantCandles = [CandleData()]; // A dynamic shortlist of key candles
 }
 
 Init() { // Will be used as mql5 OnInit function
  let rates = map[active];
  let smt = GetSwings(xauusd);
  let start = Math.max(...smt[0].concat(smt[1]));
  
  for (let i = start; i >= 0; i--) {
   let r = rates.slice(i, i + 6);
   let currentCandle = this.PopulateCandleData(r);
   this.UpdateRelevantCandles(currentCandle, r);
   this.UpdateGlobalMemory(currentCandle, r);
  }
  console.log('Ended initialization');
  console.log(this.m_relevantCandles);
  /*
  
  const X_train = Array.from({ length: 11 }, (_, i) => i);
  X_train.shift();
  X_train.reverse();
  for(let i = 7; i > 0; i--) {
   let train = xauusd.slice(i, i +10).map(e => e.close);
   train.reverse();
   const model = new PolynomialRegression(2, 0.01, 10000);
   model.fit(X_train, train);
   
   const predictions = model.predict([0]);
   
   console.log('Train Y', train);
   console.log(`Prediction ${predictions}`, 'Actual', xauusd[i-1].close);
  }*/
 }
 
 PopulateCandleData(rates) {
  let candle = CandleData();
  
  let current = rates[1];
  let prev = rates[2];
  
  candle.open = current.open;
  candle.high = current.high;
  candle.low = current.low;
  candle.close = current.close;

  if (IsBullish(current)) {
   candle.bullScore += 25;
  } else {
   candle.bearScore += 25;
  }
  
  GetFVG(rates, 1, candle, this.m_relevantCandles[this.m_relevantCandles.length - 1]);
  
  if (current.close > prev.high) candle.bullScore += 50;
  if (current.close < prev.low) candle.bearScore += 50;
  
  if ((current.high - current.open) > (current.open - current.low)) {
   candle.bullScore += 25;
   candle.bearScore -= 25;
  } else if ((current.high - current.open) < (current.open - current.low)) {
   candle.bearScore += 25;
   candle.bullScore -= 25;
  }
  
  /*
  // Todo: Add metric to check three candles slope to confirm if hammer candle should affect bullscore or bearscore
  double bodySize = Math.abs(candle.open - candle.close);
  double upperWick = candle.high - Math.max(candle.open - candle.close);
  double lowerWick = Math.min(candle.open - candle.close) - candle.low;
  */
  return candle;
 }
 
 // Updates the shortlist of relevant candles and checks for mitigation
 UpdateRelevantCandles(current, rates) {
  // Iterate backward and remove mitigated candles.
  
  let obcheckflag = false;
  this.m_relevantCandles.push(current);
  
  for (let i = this.m_relevantCandles.length - 1; i >= 0; i--) {
   let relCandle = this.m_relevantCandles[i];
   
   if (relCandle.fvgType != -1) {
    let setActive = -1;
    
    if (relCandle.fvgType == 0) { // Bullish
     if (current.low < relCandle.fvgStart) {
      setActive = relCandle.fvgType;
      
      if (current.low < ((relCandle.fvgEnd + relCandle.fvgStart) / 2)) relCandle.fvgType = -1;
     }
    } else { // Bearish
     if (current.high > relCandle.fvgStart) {
      setActive = relCandle.fvgType;
      
      if (current.high > ((relCandle.fvgEnd + relCandle.fvgStart) / 2)) relCandle.fvgType = -1;
     }
    }
    
    if (setActive != -1) {
     this.m_globalMemory.activeFVGType = setActive;
     this.m_globalMemory.activeFvgStart = relCandle.fvgStart;
     this.m_globalMemory.activeFvgEnd = relCandle.fvgEnd;
    }
   }
   
   if (i == this.m_relevantCandles.length - 3) {
    if (IsFractal(rates, 3, false)) {
     relCandle.isSwingLow = true;
    }
    if (IsFractal(rates, 3, true)) {
     relCandle.isSwingHigh = true;
    }
    
    // Todo: Detect OB here
   }
   
   if (i <= this.m_relevantCandles.length - 3) {
    if (relCandle.isBullishOB && current.low < relCandle.low) relCandle.isBullishOB = false;
    if (relCandle.isBearishOB && current.high > relCandle.high) relCandle.isBearishOB = false;
    
    if (relCandle.isSwingHigh && current.high > relCandle.high) {
     relCandle.isSwingHigh = false;
     current.tookSwingHigh = true;
    }
    
    if (relCandle.isSwingLow && current.low < relCandle.low) {
     relCandle.isSwingLow = false;
     current.tookSwingLow = true;
    }
    
    // If after three candles a candle is not an OB/Swing 
    if (!relCandle.tookSwingHigh && !relCandle.tookSwingLow && relCandle.swingRecovery == 0 && relCandle.fvgType == -1 && relCandle.obType == -1 && !relCandle.isSwingHigh && !relCandle.isSwingLow) {
     // Candle is no longer relevant.
     this.m_relevantCandles.splice(i, 1);
    }
   }
  }
  
  // Trim the array to a manageable size
  if (this.m_relevantCandles.length > 100) this.m_relevantCandles.shift();
 }
 
 // Updates the high-level GlobalMemory state
 UpdateGlobalMemory(current, rates) {
  let m_g = this.m_globalMemory;
  
  let currentSentiment = current.bullScore - current.bearScore;
  let previousSentiment = m_g.previousBullScore - m_g.previousBearScore;
  
  if (currentSentiment > 0 && previousSentiment > 0) {
   // Both are bullish. If current is stronger, momentum increases.
   m_g.momentumScore = (currentSentiment > previousSentiment) ? m_g.momentumScore + 1 : m_g.momentumScore - 1;
  } else if (currentSentiment < 0 && previousSentiment < 0) {
   // Both are bearish. If current is stronger, momentum increases.
   m_g.momentumScore = (currentSentiment < previousSentiment) ? m_g.momentumScore - 1 : m_g.momentumScore + 1;
  } else {
   // Trend is changing or failing, reset momentum
   m_g.momentumScore = 0;
  }
  
  // Store current scores for the next candle's analysis
  m_g.previousBullScore = current.bullScore;
  m_g.previousBearScore = current.bearScore;
  
  //--- Track price interaction with key levels
  m_g.approachingFVG = 0;
  m_g.inFVG = 0;
  m_g.fvgJustMitigated = 0;
  m_g.priceLeftFVG = 0;
  
  m_g.approachingOB = 0;
  m_g.inOB = 0;
  
  m_g.breakout = 0;
  m_g.isEngulfing = 0;

  // Mitigating candle must not be the fvg candle or range extender
  
  // Check if activeFVG is still active
  if (m_g.activeFVGType != -1) {
   if (m_g.activeFVGType == 0) {
    // Checking here
    if (current.close < m_g.activeFvgEnd) {
     m_g.activeFVGType = -1;
    } else {
     // If price tests FVG (Bullish)
     if (current.low <= m_g.activeFvgStart) m_g.inFVG = 1;
     
     // If price mitigates the FVG
     let mitigated = false;
     for (let i = 1; i <= 3; i++) {
      
     }
     // Todo:
     // Run a 3 candle loop here, to check for candle testing FVG
     if (current.close > m_g.activeFvgStart && (IsBullish(rates[1]) || IsHammer(rates[1]))) m_g.fvgJustMitigated = 1;
    }
   } else {
    // Checking here
    if (current.close > m_g.activeFvgEnd) {
     m_g.activeFVGType = -1;
    } else {
    // If price tests FVG (Bearish)
    if (current.high >= m_g.activeFvgStart) m_g.inFVG = 2;
     
     // If price mitigates the FVG
     if (current.close < m_g.activeFvgStart && (!IsBullish(rates[1]) || IsHammer(rates[1]))) m_g.fvgJustMitigated = 2;
    }
   }
  }
  
  let bullishBreakouts = 0;
  let bearishBreakouts = 0;
  
  for (let i = this.m_relevantCandles.length - 1; i >= 0; i--) {
   let relCandle = this.m_relevantCandles[i];
   // Check for price approaching FVG
   // Todo:
   // Use 40% retracement after three candles as approaching confirmation
   if (relCandle.fvgType != -1 && i <= this.m_relevantCandles.length - 2) {
    if (relCandle.fvgType == 0) {
     if (current.low <= relCandle.fvgStart + FVGApproachDistance * _Point) m_g.approachingFVG = 1;
    } else {
     if (current.high >= relCandle.fvgStart + FVGApproachDistance * _Point) m_g.approachingFVG = 2;
    }
   }
   
   // Check for swing level broken
   if (relCandle.tookSwingHigh) {
    if (current.close > relCandle.open) {
     bullishBreakouts++;
    } else {
     if(relCandle.swingRecovery != 0 && relCandle.swingRecovery == 2 && current.close < relCandle.open) {
      relCandle.swingRecovery = 0;
     } else {
      current.tookSwingLow = true;
      current.swingRecovery = 2;
      bearishBreakouts++;
     }
     relCandle.tookSwingHigh = false;
    }
   }
   
   if (relCandle.tookSwingLow) {
    if (current.close < relCandle.open) {
     bearishBreakouts++;
    } else {
     if(relCandle.swingRecovery != 0 && relCandle.swingRecovery == 1 && current.close > relCandle.open) {
      relCandle.swingRecovery = 0;
     } else {
      current.tookSwingHigh = true;
      current.swingRecovery = 1;
      bullishBreakouts++;
     }
     relCandle.tookSwingLow = false;
    }
   }
  }
  
  m_g.breakout = bullishBreakouts > bearishBreakouts ? 1 : bearishBreakouts > bullishBreakouts ? 2 : 0;
  
  let candlesSlopeY = [
   0,
   rates[3].close - rates[3].open,
   rates[2].close - rates[2].open,
   rates[1].close - rates[1].open
  ];
  
  let candleSlopeBull = CandleSlopeBullish(candlesSlopeY);
  
  // Check if price has left the mitigated FVG
  // We came down here because of "approaching" in the loop above 
  if (!m_g.inFVG && !m_g.approachingFVG && ((m_g.activeFVGType == 0 && candleSlopeBull) || (m_g.activeFVGType == 1 && !candleSlopeBull))) m_g.priceLeftFVG = true;
  
  if(IsBullish(rates[1]) && IsEngulfingCandle(rates[2], rates[1])) m_g.isEngulfing = 1;
  if(!IsBullish(rates[1]) && IsEngulfingCandle(rates[2], rates[1], 1)) m_g.isEngulfing = 2;
  
  return;
  //--- Check for trading sessions (based on a generic timeframe)
  /*int Hour(){
   MqlDateTime mTime;
   TimeCurrent(mTime);
   return(mTime.hour);
  }*/
  let hour = Hour();
  if(
   (hour >= 2 + TimeDifference && hour < 5 + TimeDifference) || 
   (hour >= 7 + TimeDifference && hour < 11 + TimeDifference) || 
   hour >= 14 + TimeDifference && hour < 18 + TimeDifference
  ) m_g.tradingSession = 1;
  
  //--- Check fast vs. slow MA
  let fastMA = iMA(_Symbol, _Period, FastMAPeriod, 0, MODE_EMA, PRICE_CLOSE, 0);
  let slowMA = iMA(_Symbol, _Period, SlowMAPeriod, 0, MODE_EMA, PRICE_CLOSE, 0);
  m_g.fastMAvsSlowMA = fastMA - slowMA; // A positive value is bullish, negative is bearish
 }
};

const analyzer = new CEnsembleAnalyzer([], -0.1, true);
analyzer.Init();
OnTick();

/**
 * TODO:
 Generate training dataset for each sets with their own label
 
 Decision tree (1)
 * [0] approachingFVG (0=None, 1=Bullish FVG, 2=Bearish FVG)
 * [1] inFVG (0=None, 1=Bullish FVG, 2=Bearish FVG)
 * [2] fvgMitigated (0=None, 1=Bullish FVG, 2=Bearish FVG)
 * [3] priceLeftFVG (0=None, 1=Bullish FVG, 2=Bearish FVG)
 
 Decision tree (2)
 * [4] approachingOB(0 = None, 1 = Bullish OB, 2 = Bearish OB) 
 * [5] inOB(0 = None, 1 = Bullish FVG, 2 = Bearish FVG) combine with approaching OB 
 * [6] smtDivergenceDetected(0 = None, 1 = Bullish, 2 = Bearish) 
 * [7] smtDivergenceConfirmed(0 = None, 1 = Bullish, 2 = Bearish)
 
 Decision tree (3)
 * [8] breakout (Breaker Blocks) (0=None, 1=Bullish, 2=Bearish)
 * [9] polyRegressionDir (0=None, 1=Bullish, 2=Bearish)
 * [10] EMAvsPrice (0=Bullish, 1=Bearish)
 * [11] isEngulfing (0=None, 1=Bullish, 2=Bearish) - change to isConfirmationPattern
 
 Decision tree (4)
 * [12] inTradingSession (0=False, 1=True)
 * [13] htfTrendBias(0=None - low r_squared, 1=Bullish, 2=Bearish), predict with polynomial reg 
 * [14] htfInFVG(0 = None, 1 = Bullish FVG, 2 = Bearish FVG)
 * [15] decTreeOn123Results(0=None, 1=Bullish, 2=Bearish)
 
 * LABEL (0=Hold, 1=Buy, 2=Sell) - Each tree would have their own labelling for training
 
 Each feature set will be trained with their own decision tree.
 * Feature set 1: [0, 1, 2, 3]
 * Feature set 2: [4, 5, 6, 7]
 * Feature set 3: [8, 9, 10, 11]
 * Feature set 4: sets[1, 2, 3]
 * Feature set 5: [12, 13, 14, set 4]
 

 * EMAvsPrice logics:
 * EMA 15P Typ 30M
 * Confirmation candle testing or mitigating EMA, engulfing
 * or continuous sweep testing or crossing over
 *

 */
/*
const TRADING_DAT = [
    // --- 1. STRONG BULLISH (Confirmed SMT + Bullish Liquidity/Bias) [LABEL: 1] ---
    [0, 0, 2, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0, 1],
    [0, -1, 2, 0, 0, -1, -1, -1, -1, -1, 0, 1, 0, 0, 1], // OB broken Bullish
    [0, 0, 1, 0, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 1], // Approaching Bullish FVG
    [0, 0, 2, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 1], // In Bullish OB
    [0, 0, 1, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1], // Bullish FVG mitigated
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1], // In Bullish FVG
    [0, -1, 1, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 2, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 1],
    [0, 0, 2, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1],
    [0, -1, 1, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 2, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1],

    // --- 2. STRONG BEARISH (Confirmed SMT + Bearish Liquidity/Bias) [LABEL: -1] ---
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1], // In Bearish FVG
    [1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, 1, 1, -1], // Approaching Bearish FVG
    [1, 1, 2, 1, 1, -1, -1, -1, -1, 1, -1, 0, 1, 1, -1], // In Bearish OB
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, 1, 1, -1], // Bearish FVG mitigated
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, 1, 0, 1, 1, -1], // OB broken Bearish
    [1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, 1, -1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, -1, -1, 1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, 1, 1, -1],
    [1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, 1, 1, -1],

    // --- 3. HOLD SCENARIOS (SMT Detected but NOT Confirmed / Conflicting Signals) [LABEL: 0] ---
    // Divergence detected, waiting for FVG/OB or Engulfing confirmation.
    [0, 0, 1, 0, -1, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0], // Bullish SMT Detected, approaching FVG demand (WAIT)
    [1, 1, 2, 1, -1, 1, -1, -1, -1, -1, -1, 0, 1, -1, 0], // Bearish SMT Detected, approaching FVG supply (WAIT)
    [0, -1, 1, 0, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1, 0], // Bullish SMT Detected, in OB demand (WAIT)
    [1, 0, 2, 1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, 0], // Bearish SMT Detected, in OB supply (WAIT)
    [0, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0], // Bullish SMT Detected, but Engulfing is Bearish (WAIT)
    [1, 0, 2, 1, 0, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0], // Bearish SMT Detected, but Engulfing is Bullish (WAIT)
    [-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0], // SMT Detected, No other bias (WAIT)
    [-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0], // SMT Detected, No other bias (WAIT)

    // Conflicting Confirmed SMT (Must be a HOLD, neutralized to -1)
    [0, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0], // Contradiction: Both SMT Confirmed (WAIT)
    [0, -1, 2, 1, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0], // Bullish SMT Confirmed, but MA is Bearish (WAIT)
    [1, 0, 1, 0, 1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0], // Bearish SMT Confirmed, but MA is Bullish (WAIT)

    // --- 4. WEAKER BUYS (General Bias, No SMT Detected) [LABEL: 1] ---
    [0, 0, 2, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, -1, 1, 0, 0, -1, -1, -1, -1, -1, 0, 1, -1, -1, 1], // OB broken Bullish
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, 0, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 2, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 1],
    [0, 0, 1, 0, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, 1],

    // --- 5. WEAKER SELLS (General Bias, No SMT Detected) [LABEL: -1] ---
    [1, 1, 2, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 2, 1, 1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1],
    [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1],

    // --- 6. ADDITIONAL HOLDS / MIXED BIAS (SMT Detection Active or Conflicting) [LABEL: 0] ---
    // Price in conflicting zones or SMT detected, but bias is mixed.
    [0, 1, 1, 0, 1, -1, 1, -1, -1, -1, -1, 0, 0, -1, 0], // Bullish SMT Detected, but In Bearish FVG (WAIT)
    [1, 0, 2, 1, 0, -1, 0, -1, -1, -1, -1, 0, 1, -1, 0], // Bearish SMT Detected, but In Bullish FVG (WAIT)
    [-1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [-1, -1, 2, 1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 1, 1, 0, 1, -1, -1, 1, -1, -1, -1, 0, 0, -1, 0],
    [1, 0, 2, 1, 0, -1, -1, 0, -1, -1, -1, 0, 1, -1, 0],
    [-1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [-1, -1, 2, 1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 0, 2, 1, 0, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, 1, -1, 0, -1, -1, 0], // Bullish bias, but in Bearish OB (WAIT)
    [1, 1, 2, 1, 1, -1, -1, -1, -1, 0, -1, 0, -1, -1, 0], // Bearish bias, but in Bullish OB (WAIT)
    [0, 0, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, -1, -1, 0], // Bullish bias, but in Bearish FVG (WAIT)
    [1, 1, 2, 1, 1, -1, 0, -1, -1, -1, -1, 0, -1, -1, 0], // Bearish bias, but in Bullish FVG (WAIT)
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
    [0, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0],
    [1, 1, 2, 1, 1, -1, -1, -1, -1, -1, -1, 0, 1, -1, 0],
];

let X_train = TRADING_DAT.slice(0, TRADING_DAT.length -6);
let y_train = X_train.map(e => e[e.length -1]);
X_train.forEach(e => e.pop());

let X_test = TRADING_DAT.slice(TRADING_DAT.length -6);
X_test.forEach(e => e.pop());

const classifier = new DecisionTree({
 maxDepth: 4,
 criterion: "entropy",
});

classifier.fit(X_train, y_train);

const predictions = classifier.predict(X_test);

console.log("--- Decision Tree Classifier Results ---");
console.log("Predictions:", predictions);

console.log("\n--- Generated Tree Structure (Depth 4) ---");
//printTree(classifier.root);

*/
/**
 * Deep-dive suggestions on how to enhance the project across Feature Engineering, Model Selection, and Robust Training:

1. Feature Engineering: Adding Context and Depth
While your current features cover the pattern-based market structure (ICT/SMC), they lack essential context related to volatility, liquidity, and higher time frame alignment.

A. Volatility and Risk Features
The model currently doesn't know if the market is moving quickly or slowly, or if a signal is happening on a massive daily candle or a tiny consolidation candle.

Average True Range (ATR):

Feature: currentATRNormalized (The current 14-period ATR divided by the average ATR over the last 100 bars).

Value: A higher value (e.g., > 1.5) means the market is unusually volatile, implying breakouts or reversals might be sharp.

Candle Size vs. ATR:

Feature: candleRangeVsATR

Value: Quantifies the percentage of the current candle's range relative to the ATR. A large candle closing into a liquidity zone (FVG/OB) is much more significant than a small candle.

B. Quantifying Liquidity Zones (FVG/OB Size)
The model needs to know if an FVG is a massive gap that suggests powerful imbalance or a tiny one that is easily run through.

FVG/OB Depth:

Feature: fvgDepthNormalized or obDepthNormalized

Value: Size of the FVG (High-Low) relative to the 14-period ATR. This tells the model how strong the underlying market imbalance is. A larger, deeper FVG signal should be weighted more heavily.

C. Higher Time Frame (HTF) Alignment (Crucial)
A trade signal on a 1-hour chart is far more reliable if it aligns with the 4-hour or Daily trend. This is the single most important missing element.

HTF Trend Bias:

Feature: htfFastMAvsSlowMA

Value: Encoded directionally (0=Bullish, 1=Bearish, -1=Neutral) based on MA crossing/separation on the next higher time frame (e.g., 4H if you're trading 1H).

HTF Liquidity Zone Status:

Feature: htfInFVG

Value: Directionally encoded (0=Bullish, 1=Bearish, -1=None). If your 1H buy signal is happening inside a Daily Bearish FVG, it's a counter-trend signal and should be treated as a lower-probability trade.

2. Model Selection: Moving Beyond Simple Decision Trees
A Decision Tree is excellent for interpretability (you can easily see the rules: "IF smtDivergenceConfirmed is Bullish AND directionalInFVG is Bullish THEN Buy"), but they are unstable and suffer from high variance on noisy financial data.

A. Ensemble Methods (Recommended First Step)
You should immediately upgrade to Ensemble Methods for stability and prediction quality:

Random Forest (RF):

Benefit: Reduces variance and overfitting compared to a single Decision Tree. It still provides decent interpretability through Feature Importance scores.

Gradient Boosting (XGBoost or LightGBM):

Benefit: These models are generally the best-performing models for structured tabular data. They build trees sequentially, fixing the errors of the previous ones, leading to extremely powerful non-linear relationship modeling.

B. Time-Series Modeling (Advanced)
Since trading data is sequential, the order in which events happen matters (e.g., price approaches OB, leaves FVG, then SMT confirms).

Recurrent Neural Networks (RNNs) / LSTMs:

Benefit: LSTMs are specifically designed to remember patterns over time. You can feed the model sequences of the last 5-10 bars worth of features, allowing it to learn the flow of price action, not just the state of the current bar.

3. Training and Evaluation: Ensuring Real-World Performance
This is often the most overlooked part of building a trading model, yet it determines if the model is profitable or merely overfit.

A. Time-Series Validation (Walk-Forward Optimization)
Do not use standard K-Fold Cross-Validation. It introduces lookahead bias by training the model on future data, making performance metrics useless.

Walk-Forward Optimization:

Train the model on January 2024 data.

Test the model on February 2024 data (the "walk-forward" period).

Re-train the model on January + February 2024 data.

Test on March 2024 data.

This constantly simulates a real trading environment where the model is always trained on past data to predict the future.

B. Custom Loss Function and Metrics
The goal of a trading model is profit, not accuracy.

Weighted F1-Score / Confusion Matrix Weighting:

Focus on minimizing False Positives (FP): A trade signal that turns into a loss is the most expensive error. Your cost function should heavily penalize predicting a Buy/Sell when the outcome is Hold or the opposite direction.

You could use a custom metric that incorporates a realistic Reward-to-Risk (R:R) ratio. For example, a successful trade is worth 3 points (3R) but a losing trade costs -1 point (-1R).

Handling Class Imbalance (Crucial for 'Hold' vs. 'Trade'):

In real life, 90%+ of bars are 'Hold'. If your dataset reflects this, the model will learn to always predict 'Hold' for 90% accuracy.

Solution: Use Class Weighting (tell the model that 'Buy' and 'Sell' samples are 10 times more important than 'Hold' samples) or Oversampling (replicate 'Buy' and 'Sell' data points to balance the dataset).
 */
